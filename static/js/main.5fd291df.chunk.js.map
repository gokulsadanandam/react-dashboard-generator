{"version":3,"sources":["Login.Context.js","Auth.Context.js","Header.js","Login.js","UserComponent.js","UserManagement.js","PreviewTable.js","DataSourceComponent.js","DataSource.js","SimpleLineChartPreview.js","SimpleAreaChartPreview.js","SimpleBarChartPreview.js","Component.js","ComponentsManagement.js","DashboardPreview.js","DashboardComponent.js","DashboardManagement.js","MyDashboards.js","App.js","index.js"],"names":["fakeAuth","isAuthenticated","isUserAdmin","username","signin","userName","userRole","cb","setTimeout","signout","loginContext","React","createContext","authContext","ProvideAuth","children","auth","useState","user","setUser","role","console","log","isUserLoggedIn","useProvideAuth","Provider","value","useAuth","useContext","Header","history","useHistory","AppBar","elevation","Toolbar","IconButton","component","NavigationLink","edge","color","Contactless","Box","mx","Link","variant","to","underline","display","ml","Button","onClick","push","Login","useIndexedDB","getByIndex","add","useEffect","then","admin","undefined","password","errors","message","status","creds","updateCreds","authenticateUser","e","a","preventDefault","prevState","updateInputValue","type","target","justifyContent","alignItems","my","p","Card","style","padding","CardHeader","avatar","Avatar","title","titleTypographyProps","onSubmit","CardContent","flexDirection","TextField","placeholder","size","fullWidth","onChange","marginBottom","CardActions","disableSpacing","px","width","Typography","textAlign","UserComponent","props","updateUser","User","deleteUser","updateState","isTypeEdit","Container","gutterBottom","noValidate","autoComplete","m","Grid","container","spacing","item","id","disabled","FormControl","FormLabel","RadioGroup","name","row","FormControlLabel","control","Radio","label","textTransform","UserManagement","users","loader","error","selectedUser","UserManagementState","updateUserManagementState","getAll","update","deleteRecord","AddNewUser","EditUser","lg","direction","List","subheader","ListSubheader","map","ListItem","button","selected","ListItemText","mr","Chip","PreviewTable","rows","column","totalRows","totalCols","TableContainer","Paper","Table","TableHead","TableRow","header","colIndex","TableCell","toUpperCase","TableBody","index","scope","DataSourceComponent","data","dataSource","updateDataSource","DataSource","deleteDataSource","select","SelectProps","MenuItem","margin","hidden","FileReaderCursor","FileReader","onloadend","parsedRecords","JSON","parse","result","length","alert","files","fileData","split","pop","toLowerCase","readAsText","dataSourcename","Object","keys","DataSourceManagement","dataSources","selectedDataSource","DataSourceManagementState","updateDataSourceManagementState","sources","AddNewDataSource","EditDataSource","flexWrap","SimpleLineChartPreview","key","ResponsiveContainer","minWidth","minHeight","background","LineChart","height","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","Legend","Line","stroke","activeDot","r","SimpleAreaChartPreview","AreaChart","x1","y1","x2","y2","offset","stopColor","stopOpacity","Area","fillOpacity","fill","SimpleBarChartPreview","BarChart","Bar","EditableComponent","datasource","updateComponent","Component","nextState","option","ComponentManagement","components","selectedComponent","ComponentManagementState","updateComponentManagementState","AddNewComponent","EditComponent","deleteComponent","DashboardPreview","datasources","componentsDb","ResponsiveReactGridLayout","WidthProvider","Responsive","dashboard","updateDashboard","sourcesList","componentsList","filteredData","filter","includes","d","flat","opts","renderComponent","i","Date","getTime","slice","measureBeforeMount","useCSSTransforms","compactType","preventCollision","x","y","w","h","static","DashboardComponent","list","Dashboard","deleteDashboard","assigned_users","multiple","renderValue","join","Checkbox","checked","indexOf","primary","event","dashboardname","DashboardManagement","dashboards","selectedDashboard","DashboardManagementState","updateDashboardManagementState","AddNewDashboard","EditDashboard","MyDashboard","myDashboards","updateMyDashboards","filteredList","PrivateRoute","rest","render","location","pathname","App","basename","marginTop","path","initDB","version","objectStoresMeta","store","storeConfig","keyPath","autoIncrement","storeSchema","keypath","options","unique","rootElement","document","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.5fd291df.chunk.js","sourcesContent":["import React , {useState} from 'react';\r\n\r\nconst fakeAuth = {\r\n  isAuthenticated: false,\r\n  isUserAdmin : false , \r\n  username : '' ,\r\n  signin(userName,userRole,cb) {\r\n    fakeAuth.isAuthenticated = true;\r\n    fakeAuth.isUserAdmin = false;\r\n    fakeAuth.username = userName;\r\n    if(userRole == \"admin\") {\r\n      fakeAuth.isUserAdmin = true;\r\n    }\r\n    setTimeout(cb, 100); // fake async\r\n  },\r\n  signout(cb) {\r\n    fakeAuth.isAuthenticated = false;\r\n    fakeAuth.isUserAdmin = false;\r\n    setTimeout(cb, 100);\r\n  }\r\n};\r\n\r\nexport const loginContext = React.createContext(fakeAuth)\r\n","import React , { createContext , useContext , useState } from \"react\";\r\n\r\nconst authContext = createContext();\r\n\r\nconst fakeAuth = {\r\n  isAuthenticated: false,\r\n  isUserAdmin : false , \r\n  username : '' ,\r\n  signin(userName,userRole,cb) {\r\n    fakeAuth.isAuthenticated = true;\r\n    fakeAuth.isUserAdmin = false;\r\n    fakeAuth.username = userName;\r\n    if(userRole == \"admin\") {\r\n      fakeAuth.isUserAdmin = true;\r\n    }\r\n    setTimeout(cb, 100); // fake async\r\n  },\r\n  signout(cb) {\r\n    fakeAuth.isAuthenticated = false;\r\n    fakeAuth.isUserAdmin = false;\r\n    fakeAuth.username = '';\r\n    setTimeout(cb, 100);\r\n  }\r\n};\r\n\r\n\r\nfunction useProvideAuth() {\r\n  const [user, setUser] = useState(null);\r\n\r\n  const signin = (username , role , cb) => {\r\n    return fakeAuth.signin(username , role , () => {\r\n    console.log(username,role)\r\n      setUser({ username  , role , isAuthenticated : true , isUserLoggedIn : true });\r\n      cb();\r\n    });\r\n  };\r\n\r\n  const signout = cb => {\r\n    return fakeAuth.signout(() => {\r\n      setUser(null);\r\n      cb();\r\n    });\r\n  };\r\n\r\n  return {\r\n    user,\r\n    signin,\r\n    signout\r\n  };\r\n}\r\n\r\nexport function ProvideAuth({ children }) {\r\n  const auth = useProvideAuth();\r\n  return (\r\n    <authContext.Provider value={auth}>\r\n      {children}\r\n    </authContext.Provider>\r\n  );\r\n}\r\n\r\nexport default function useAuth() {\r\n  return useContext(authContext);\r\n}","import React from \"react\";\r\nimport { AppBar, Toolbar, Box, IconButton , Button , Link } from \"@material-ui/core\";\r\nimport { Link as NavigationLink } from \"react-router-dom\";\r\nimport { Contactless, ExitToApp, AccountCircle } from \"@material-ui/icons\";\r\n\r\nimport {loginContext} from './Login.Context';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport useAuth , { ProvideAuth } from './Auth.Context';\r\n\r\n\r\nexport const Header = () => {\r\n\r\n  const { user , signout }  = useAuth();\r\n  const history = useHistory()\r\n\r\n\r\n  return (\r\n    <AppBar elevation={0}>\r\n      <Toolbar>\r\n        <IconButton\r\n          component={NavigationLink}\r\n          edge=\"start\"\r\n          color=\"inherit\"\r\n        >\r\n          <Contactless />\r\n        </IconButton>\r\n        <Box mx={1}>\r\n            <Link\r\n              color=\"inherit\"\r\n              variant=\"body1\"\r\n              component={NavigationLink}\r\n              to=\"/my-dashboard\"\r\n              underline=\"none\"\r\n            >\r\n              My Dashboards\r\n            </Link>\r\n        </Box>\r\n        <Box display=\"flex\">\r\n          { user && user.role == \"admin\" && <Box mx={1}>\r\n            <Link\r\n              color=\"inherit\"\r\n              variant=\"body1\"\r\n              component={NavigationLink}\r\n              to=\"/datasources\"\r\n              underline=\"none\"\r\n            >\r\n              DataSources\r\n            </Link>\r\n          </Box>}\r\n          { user && user.role == \"admin\" && <Box mx={1}>\r\n            <Link\r\n              color=\"inherit\"\r\n              variant=\"body1\"\r\n              component={NavigationLink}\r\n              to=\"/components\"\r\n              underline=\"none\"\r\n            >\r\n              Components\r\n            </Link>\r\n          </Box>}\r\n          { user && user.role == \"admin\" && <Box mx={1}>\r\n            <Link\r\n              color=\"inherit\"\r\n              variant=\"body1\"\r\n              component={NavigationLink}\r\n              to=\"/usermanagement\"\r\n              underline=\"none\"\r\n            >\r\n              User Management\r\n            </Link>\r\n          </Box>}\r\n          { user && user.role == \"admin\" && <Box mx={1}>\r\n            <Link\r\n              color=\"inherit\"\r\n              variant=\"body1\"\r\n              component={NavigationLink}\r\n              to=\"/dashboard\"\r\n              underline=\"none\"\r\n            >\r\n              Dashboard Management\r\n            </Link>\r\n          </Box>}\r\n        </Box>\r\n        { !user && <Box ml=\"auto\">\r\n           <Button edge=\"end\" color=\"secondary\" variant=\"contained\" onClick={() => history.push('/') }>\r\n            Go To Login Screen\r\n          </Button>\r\n        </Box>}\r\n        { user && user.isAuthenticated && <Box ml=\"auto\">\r\n           <Button edge=\"end\" color=\"secondary\" variant=\"contained\" onClick={() => signout( () => history.push('/') )}>\r\n           LogOut\r\n          </Button>\r\n        </Box>}\r\n      </Toolbar>\r\n    </AppBar>\r\n  )\r\n}\r\n","import React , { useEffect } from 'react';\r\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\r\nimport clsx from 'clsx';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nimport { useIndexedDB } from 'react-indexed-db';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport {loginContext} from './Login.Context';\r\nimport useAuth from './Auth.Context';\r\n\r\n\r\nexport const Login = () => {\r\n\r\n  const { isAuthenticated , isUserAdmin , signin }  = React.useContext(loginContext);\r\n\r\n  const auth = useAuth();\r\n\r\n  const { getByIndex , add  } = useIndexedDB('users');\r\n\r\n  const history = useHistory()\r\n\r\n  useEffect(() => {\r\n\r\n    if(isAuthenticated) {\r\n      return history.push('/datasources')\r\n    }\r\n    getByIndex('username', 'admin').then( admin => {\r\n        if(admin == undefined) {\r\n            add({ username : 'admin' , password : 'admin' , role : 'admin' })\r\n        }\r\n    });\r\n  }, []);\r\n\r\n\r\n  const [creds,updateCreds] = React.useState({ username : '' , password : '' , errors : { message : '' , status : false } })\r\n\r\n\r\n  const authenticateUser = async e => {\r\n    e.preventDefault();\r\n    if( creds.username && creds.password ) {\r\n      const user = await getByIndex('username',creds.username)\r\n\r\n      if( user && user.password === creds.password ) {\r\n        // sessionStorage.setItem(\"isUserLoggedIn\" , true)\r\n        return auth.signin( user.username , user.role , () => history.push('/my-dashboard') )\r\n        // return signin( user.username , user.role ,  () => history.push('/my-dashboard'));\r\n      }\r\n\r\n      if(!user) {\r\n        return updateCreds( prevState => ({ ...prevState , username : '' , password : '' , errors : { message : 'User Not Found! Try Again' , status : true } }) );\r\n      }\r\n      \r\n      return updateCreds( prevState => ({ ...prevState , password : '' , errors : { message : 'Invalid Password!!' , status : true } }) );\r\n    }\r\n\r\n    return updateCreds( prevState => ({ ...prevState , errors : { message : 'Enter Credentials!!' , status : true } }) );\r\n\r\n  }\r\n\r\n  const updateInputValue = (e,type) => updateCreds( prevState => ({ ...prevState , [type] : e.target.value }) )\r\n\r\n  return (\r\n    <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" my={3} p={2} mx=\"auto\">\r\n    <Card style={{ padding : 8 }}>\r\n      <CardHeader\r\n        avatar={\r\n          <Avatar aria-label=\"recipe\">\r\n            L\r\n          </Avatar>\r\n        }\r\n        title=\"User Login\"\r\n        titleTypographyProps={{ variant : 'h6' }}\r\n      />\r\n      <form onSubmit={authenticateUser}>\r\n      <CardContent>\r\n        <Box display=\"flex\" flexDirection=\"column\">\r\n           <TextField\r\n              placeholder=\"Username\"\r\n              size=\"small\"\r\n              variant=\"outlined\"\r\n              fullWidth={true}\r\n              value={creds.username}\r\n              onChange={(e) => updateInputValue(e,'username')}\r\n              style={{ marginBottom : 16 }}\r\n            />\r\n            <TextField\r\n              placeholder=\"Password\"\r\n              size=\"small\"\r\n              variant=\"outlined\"\r\n              type=\"password\"\r\n              value={creds.password}\r\n              onChange={(e) => updateInputValue(e,'password')}\r\n              fullWidth={true}\r\n            />\r\n            </Box>\r\n        </CardContent>\r\n        <CardActions disableSpacing>\r\n        <Box px={1} width=\"100%\">\r\n\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              type=\"submit\"\r\n              fullWidth={true}\r\n            >\r\n              Login\r\n            </Button>\r\n            </Box>\r\n        </CardActions>\r\n      </form>\r\n      { creds.errors.status && <Typography variant=\"body2\">\r\n          <Box color=\"error.main\"  textAlign=\"center\">\r\n            { creds.errors.message }\r\n          </Box>\r\n        </Typography> \r\n      }\r\n    </Card>\r\n    </Box>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport {\r\n  Box,\r\n  TextField,\r\n  Container,\r\n  FormControl,\r\n  FormControlLabel,\r\n  FormLabel,\r\n  Grid,\r\n  Button,\r\n  RadioGroup,\r\n  Typography,\r\n  Radio,\r\n} from \"@material-ui/core\";\r\n\r\nexport const UserComponent = (props) => {\r\n  const [user, updateUser] = React.useState({\r\n    username: \"\",\r\n    password: \"\",\r\n    role: \"\",\r\n  });\r\n\r\n  const { title = \"Create User\", onSubmit, User, type, deleteUser } = props;\r\n\r\n  React.useEffect(() => {\r\n    if (type === \"edit\") {\r\n      updateUser(User);\r\n    }\r\n  }, [User]);\r\n\r\n  const updateState = (e, type) => {\r\n    updateUser((prevState) => ({ ...prevState, [type]: e.target.value }));\r\n  };\r\n\r\n  const isTypeEdit = () => (type === \"edit\" ? true : false);\r\n\r\n  return (\r\n    <Container>\r\n      <Typography variant=\"body1\" gutterBottom>\r\n        {title}\r\n      </Typography>\r\n      <form\r\n        noValidate\r\n        autoComplete=\"off\"\r\n        onSubmit={(e) => {\r\n          e.preventDefault();\r\n          onSubmit(user);\r\n          updateUser((prevState) => ({\r\n            ...prevState,\r\n            username: \"\",\r\n            password: \"\",\r\n            role: \"\",\r\n          }));\r\n        }}\r\n      >\r\n        <Box m={1}>\r\n          <Grid container spacing={1}>\r\n            <Box m={1}>\r\n              <Grid container spacing={2}>\r\n                <Grid item>\r\n                  <TextField\r\n                    id=\"username\"\r\n                    placeholder=\"Username\"\r\n                    value={user.username}\r\n                    onChange={(e) => updateState(e, \"username\")}\r\n                    variant=\"outlined\"\r\n                    size=\"small\"\r\n                    disabled={isTypeEdit()}\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <TextField\r\n                    id=\"password\"\r\n                    placeholder=\"Password\"\r\n                    type=\"password\"\r\n                    value={user.password}\r\n                    onChange={(e) => updateState(e, \"password\")}\r\n                    variant=\"outlined\"\r\n                    size=\"small\"\r\n                    disabled={isTypeEdit()}\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n            </Box>\r\n            <Grid container>\r\n              <Box m={1}>\r\n                <Grid item>\r\n                  <FormControl component=\"fieldset\">\r\n                    <FormLabel component=\"legend\">User Role</FormLabel>\r\n                    <RadioGroup\r\n                      aria-label=\"role\"\r\n                      name=\"role\"\r\n                      value={user.role}\r\n                      onChange={(e) => updateState(e, \"role\")}\r\n                      row\r\n                    >\r\n                      <FormControlLabel\r\n                        value=\"admin\"\r\n                        control={<Radio size=\"small\" />}\r\n                        label=\"Admin\"\r\n                      />\r\n                      <FormControlLabel\r\n                        value=\"user\"\r\n                        control={<Radio size=\"small\" />}\r\n                        label=\"User\"\r\n                      />\r\n                    </RadioGroup>\r\n                  </FormControl>\r\n                </Grid>\r\n              </Box>\r\n            </Grid>\r\n            <Grid item>\r\n              <Button\r\n                color=\"secondary\"\r\n                fullWidth\r\n                variant=\"contained\"\r\n                size=\"small\"\r\n                type=\"submit\"\r\n                style={{ textTransform: \"none\" }}\r\n              >\r\n                {title}\r\n              </Button>\r\n            </Grid>\r\n            {isTypeEdit() && (\r\n              <Grid item>\r\n                <Button\r\n                  color=\"primary\"\r\n                  fullWidth\r\n                  variant=\"contained\"\r\n                  size=\"small\"\r\n                  onClick={(e) => {\r\n                    e.preventDefault();\r\n                    deleteUser(user);\r\n                    updateUser((prevState) => ({\r\n                      ...prevState,\r\n                      username: \"\",\r\n                      password: \"\",\r\n                      role: \"\",\r\n                    }));\r\n                  }}\r\n                  style={{ textTransform: \"none\" }}\r\n                >\r\n                  Delete User\r\n                </Button>\r\n              </Grid>\r\n            )}\r\n          </Grid>\r\n        </Box>\r\n      </form>\r\n    </Container>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport {\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  ListSubheader,\r\n  Chip,\r\n  Button,\r\n  Box,\r\n  Typography,\r\n  Grid,\r\n} from \"@material-ui/core\";\r\n\r\nimport { useIndexedDB } from \"react-indexed-db\";\r\nimport { UserComponent } from \"./UserComponent\";\r\nexport const UserManagement = () => {\r\n  const [UserManagementState, updateUserManagementState] = React.useState({\r\n    users: [],\r\n    loader: {\r\n      status: true,\r\n      message: \"Fetching Users!!\",\r\n    },\r\n    error: {\r\n      status: false,\r\n      message: \"\",\r\n    },\r\n    selectedUser: {},\r\n  });\r\n\r\n  React.useEffect(() => {\r\n    getAll().then((users) => {\r\n      updateUserManagementState((prevState) => ({\r\n        ...prevState,\r\n        users,\r\n        loader: { message: \"User List Fetched!\", status: false },\r\n      }));\r\n    });\r\n  }, [UserManagementState.loader.status]);\r\n\r\n  const { add, getAll , update , deleteRecord  } = useIndexedDB(\"users\");\r\n\r\n  const AddNewUser = async (user) => {\r\n    if (user) {\r\n      const event = await add(user);\r\n      updateUserManagementState((prevState) => ({\r\n        ...prevState,\r\n        loader: { message: \"Updating User List!\", status: true },\r\n      }));\r\n    }\r\n  };\r\n\r\n  const EditUser = async ({role}) => {\r\n    if(role) {\r\n      const event = await update({  ...UserManagementState.selectedUser , role })\r\n      updateUserManagementState((prevState) => ({\r\n        ...prevState,\r\n        selectedUser : {},\r\n        loader: { message: \"Updating User List!\", status: true },\r\n      }));\r\n    }\r\n  }\r\n\r\n  const deleteUser = async (user) => {\r\n    if(user) {\r\n      const event = await deleteRecord (UserManagementState.selectedUser.id)\r\n      updateUserManagementState((prevState) => ({\r\n        ...prevState,\r\n        selectedUser : {},\r\n        loader: { message: \"Updating User List!\", status: true },\r\n      }));\r\n    }\r\n  }\r\n\r\n\r\n  const resetSelectedUserState = () => {\r\n    updateUserManagementState((prevState) => ({\r\n      ...prevState,\r\n      selectedUser: {},\r\n    }));\r\n  };\r\n\r\n  const updateSelectedUser = (user) => {\r\n    updateUserManagementState((prevState) => ({\r\n      ...prevState,\r\n      selectedUser: user,\r\n    }));\r\n  };\r\n\r\n\r\n\r\n\r\n  return (\r\n    <Grid container>\r\n      <Grid\r\n        item\r\n        lg={1.5}\r\n        alignItems=\"center\"\r\n        direction=\"column\"\r\n        justifyContent=\"center\"\r\n      >\r\n        <Button\r\n          color=\"secondary\"\r\n          size=\"small\"\r\n          fullWidth\r\n          style={{ textTransform: \"none\" }}\r\n          variant=\"contained\"\r\n          onClick={() => resetSelectedUserState()}\r\n        >\r\n          Create New User\r\n        </Button>\r\n        <List\r\n          component=\"nav\"\r\n          subheader={\r\n            <ListSubheader component=\"div\" id=\"nested-list-subheader\">\r\n              Available Users\r\n            </ListSubheader>\r\n          }\r\n        >\r\n          {UserManagementState.users.map(({ id ,  username, role, password }) => (\r\n            <ListItem\r\n              button\r\n               selected={id === UserManagementState.selectedUser.id}\r\n              onClick={() => updateSelectedUser({ id , username, role, password })}\r\n            >\r\n              <ListItemText>\r\n                <Box mr={1} component=\"span\">\r\n                  <Typography variant=\"body1\" component=\"span\">\r\n                    {username}\r\n                  </Typography>\r\n                </Box>\r\n                <Chip\r\n                  size=\"small\"\r\n                  label={role}\r\n                  color={role === \"admin\" ? \"primary\" : \"secondary\"}\r\n                />\r\n              </ListItemText>\r\n            </ListItem>\r\n          ))}\r\n        </List>\r\n      </Grid>\r\n      <Grid item>\r\n        {!UserManagementState.selectedUser.username && (\r\n          <UserComponent type=\"add\" title=\"Add User\" onSubmit={AddNewUser} />\r\n        )}\r\n        {!!UserManagementState.selectedUser.username && (\r\n          <UserComponent\r\n            type=\"edit\"\r\n            title=\"Edit User\"\r\n            User={UserManagementState.selectedUser}\r\n            onSubmit={EditUser}\r\n            deleteUser={deleteUser}\r\n          />\r\n        )}\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\n// export const DataSourceComponent = (props) => {\r\nexport const PreviewTable = (props) => {\r\n  const { title , rows, column , totalRows = 5 , totalCols = 5  } = props;\r\n\r\n  return (\r\n    <>\r\n      {title && <Typography variant=\"h6\" gutterBottom>\r\n        {title}\r\n      </Typography>}\r\n      <TableContainer component={Paper}>\r\n        <Table>\r\n          <TableHead>\r\n            <TableRow>\r\n              {column &&\r\n                column.map((header, colIndex) => {\r\n                  if (colIndex < totalCols) {\r\n                    return <TableCell key={`preview-tbl-header-${colIndex}`}> {header.toUpperCase()} </TableCell>;\r\n                  }\r\n                })}\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {rows &&\r\n              rows.map((row, index) => {\r\n                if (index < totalRows) {\r\n                  return (\r\n                    <TableRow key={`preview-tbl-${index}`}>\r\n                      {column.map((header, colIndex) => {\r\n                        if (colIndex < totalCols) {\r\n                          return (\r\n                            <TableCell key={`preview-tb-cell-${colIndex}`} component=\"th\" scope=\"row\">\r\n                              {\" \"}\r\n                              {row[header] || \"-\"}{\" \"}\r\n                            </TableCell>\r\n                          );\r\n                        }\r\n                      })}\r\n                    </TableRow>\r\n                  );\r\n                }\r\n              })}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nimport {\r\n  Box,\r\n  TextField,\r\n  Container,\r\n  FormControl,\r\n  FormControlLabel,\r\n  FormLabel,\r\n  Grid,\r\n  Button,\r\n  RadioGroup,\r\n  Typography,\r\n  Radio,\r\n  Select,\r\n  MenuItem,\r\n  InputLabel,\r\n} from \"@material-ui/core\";\r\n\r\nimport { PreviewTable } from \"./PreviewTable\";\r\n\r\nimport {loginContext} from './Login.Context';\r\n\r\n\r\nexport const DataSourceComponent = (props) => {\r\n  const [dataSource, updateDataSource] = React.useState({\r\n    name: \"\",\r\n    type: \"default_option\",\r\n    data: null,\r\n  });\r\n\r\n  const {\r\n    title = \"Create DataSource\",\r\n    onSubmit,\r\n    DataSource,\r\n    type,\r\n    deleteDataSource,\r\n  } = props;\r\n\r\n  React.useEffect(() => {\r\n    if (type === \"edit\") {\r\n      updateDataSource(DataSource);\r\n    }\r\n  }, [DataSource]);\r\n\r\n  const context  = React.useContext(loginContext);\r\n\r\n\r\n  const updateState = (e, type) => {\r\n    updateDataSource((prevState) => ({ ...prevState, [type]: e.target.value }));\r\n  };\r\n\r\n  const captureFileData = (e) => {\r\n    let FileReaderCursor = new FileReader();\r\n    FileReaderCursor.onloadend = (data) => {\r\n      try {\r\n\r\n      let parsedRecords = JSON.parse(data.target.result);\r\n      if (parsedRecords && parsedRecords.length) {\r\n        updateDataSource((prevState) => ({\r\n          ...prevState,\r\n          data: parsedRecords,\r\n        }));\r\n      }\r\n      }\r\n      catch(e) {\r\n        alert(\"Error Occured While Parsing JSON File. Please Valiate JSON before uploading.\")      \r\n      }\r\n    };\r\n\r\n    if (e.target.files[0]) {\r\n      let fileData = e.target.files[0];\r\n      let extension = fileData.name.split(\".\").pop().toLowerCase();\r\n      if (extension != \"json\") {\r\n        return alert(\"Only Json File Supported!!\");\r\n      }\r\n      FileReaderCursor.readAsText(fileData);\r\n    }\r\n  };\r\n\r\n  const isTypeEdit = () => (type === \"edit\" ? true : false);\r\n\r\n  return (\r\n    <Container>\r\n      <Typography variant=\"body1\" gutterBottom>\r\n        {title}\r\n      </Typography>\r\n      <form\r\n        noValidate\r\n        autoComplete=\"off\"\r\n        onSubmit={(e) => {\r\n          e.preventDefault();\r\n          onSubmit(dataSource);\r\n          updateDataSource((prevState) => ({\r\n            ...prevState,\r\n            name: \"\",\r\n            data: null,\r\n            type: \"default_option\",\r\n          }));\r\n        }}\r\n      >\r\n        <Box m={1}>\r\n          <Grid container spacing={1}>\r\n            <Box m={1}>\r\n              <Grid container spacing={2}>\r\n                <Grid item>\r\n                  <TextField\r\n                    id=\"dataSourcename\"\r\n                    placeholder=\"DataSourcename\"\r\n                    value={dataSource.name}\r\n                    onChange={(e) => updateState(e, \"name\")}\r\n                    variant=\"outlined\"\r\n                    size=\"small\"\r\n                    disabled={isTypeEdit()}\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <TextField\r\n                    select\r\n                    size=\"small\"\r\n                    variant=\"outlined\"\r\n                    placeholder=\"Select a DataSource Type\"\r\n                    SelectProps={{\r\n                      value: dataSource.type,\r\n                    }}\r\n                    onChange={(e) => updateState(e, \"type\")}\r\n                    disabled={isTypeEdit()}\r\n                  >\r\n                    <MenuItem value={\"default_option\"} disabled>\r\n                      Select a DataSource Type\r\n                    </MenuItem>\r\n                    <MenuItem value={\"rest_api\"}>Rest API</MenuItem>\r\n                    <MenuItem value={\"graphql_api\"} disabled>\r\n                      GraphQL API\r\n                    </MenuItem>\r\n                    <MenuItem value={\"soap_api\"} disabled>\r\n                      SOAP API\r\n                    </MenuItem>\r\n                  </TextField>\r\n                </Grid>\r\n              </Grid>\r\n            </Box>\r\n            <Grid container style={{ margin: 8 }} spacing={2}>\r\n              <Grid item>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  component=\"label\"\r\n                  color=\"primary\"\r\n                  fullWidth\r\n                  size=\"small\"\r\n                  style={{ textTransform: \"none\" }}\r\n                >\r\n                  Upload File\r\n                  <input type=\"file\" hidden onChange={captureFileData} />\r\n                </Button>\r\n              </Grid>\r\n              <Grid item>\r\n                <Button\r\n                  color=\"secondary\"\r\n                  fullWidth\r\n                  variant=\"contained\"\r\n                  size=\"small\"\r\n                  type=\"submit\"\r\n                  style={{ textTransform: \"none\" }}\r\n                >\r\n                  {title}\r\n                </Button>\r\n              </Grid>\r\n              {isTypeEdit() && (\r\n                <Grid item>\r\n                  <Button\r\n                    color=\"primary\"\r\n                    fullWidth\r\n                    variant=\"contained\"\r\n                    size=\"small\"\r\n                    onClick={(e) => {\r\n                      e.preventDefault();\r\n                      deleteDataSource(dataSource);\r\n                      updateDataSource((prevState) => ({\r\n                        ...prevState,\r\n                        dataSourcename: \"\",\r\n                        password: \"\",\r\n                        role: \"\",\r\n                      }));\r\n                    }}\r\n                    style={{ textTransform: \"none\" }}\r\n                  >\r\n                    Delete DataSource\r\n                  </Button>\r\n                </Grid>\r\n              )}\r\n            </Grid>\r\n          </Grid>\r\n        </Box>\r\n      </form>\r\n      {dataSource && dataSource.data && (\r\n        <Grid container>\r\n          <Grid item>\r\n\r\n            <PreviewTable\r\n              rows={dataSource.data}\r\n              column={Object.keys(dataSource.data[0])}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport {\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  ListSubheader,\r\n  Chip,\r\n  Button,\r\n  Box,\r\n  Typography,\r\n  Grid,\r\n} from \"@material-ui/core\";\r\n\r\nimport { useIndexedDB } from \"react-indexed-db\";\r\nimport { DataSourceComponent } from \"./DataSourceComponent\";\r\n\r\nimport {loginContext} from './Login.Context';\r\n\r\nexport const DataSourceManagement = () => {\r\n  const [DataSourceManagementState, updateDataSourceManagementState] =\r\n    React.useState({\r\n      dataSources: [],\r\n      loader: {\r\n        status: true,\r\n        message: \"Fetching Available Data Source!!\",\r\n      },\r\n      error: {\r\n        status: false,\r\n        message: \"\",\r\n      },\r\n      selectedDataSource: {},\r\n    });\r\n\r\n  const { isAuthenticated , isUserAdmin , signin }  = React.useContext(loginContext);\r\n\r\n  const { add, getAll, update, deleteRecord } = useIndexedDB(\"datasources\");\r\n\r\n  React.useEffect(() => {\r\n    getAll().then((sources) => {\r\n      updateDataSourceManagementState((prevState) => ({\r\n        ...prevState,\r\n        dataSources: sources,\r\n        loader: { message: \"Data Source List Fetched!\", status: false },\r\n      }));\r\n    });\r\n  }, [DataSourceManagementState.loader.status]);\r\n\r\n  const AddNewDataSource = async (dataSource) => {\r\n    if (dataSource) {\r\n      const event = await add(dataSource);\r\n      updateDataSourceManagementState((prevState) => ({\r\n        ...prevState,\r\n        loader: { message: \"Updating DataSource List!\", status: true },\r\n      }));\r\n    }\r\n  };\r\n\r\n  const EditDataSource = async ({ name, data }) => {\r\n    if (name) {\r\n      const event = await update({\r\n        ...DataSourceManagementState.selectedDataSource,\r\n        name,\r\n        data,\r\n      });\r\n      updateDataSourceManagementState((prevState) => ({\r\n        ...prevState,\r\n        selectedDataSource: {},\r\n        loader: { message: \"Updating DataSource List!\", status: true },\r\n      }));\r\n    }\r\n  };\r\n\r\n  const deleteDataSource = async (DataSource) => {\r\n    if (DataSource) {\r\n      const event = await deleteRecord(\r\n        DataSourceManagementState.selectedDataSource.id\r\n      );\r\n      updateDataSourceManagementState((prevState) => ({\r\n        ...prevState,\r\n        selectedDataSource: {},\r\n        loader: { message: \"Updating DataSource List!\", status: true },\r\n      }));\r\n    }\r\n  };\r\n\r\n  const resetSelectedDataSourceState = () => {\r\n    updateDataSourceManagementState((prevState) => ({\r\n      ...prevState,\r\n      selectedDataSource: {},\r\n    }));\r\n  };\r\n\r\n  const updateSelectedDataSource = (DataSource) => {\r\n    updateDataSourceManagementState((prevState) => ({\r\n      ...prevState,\r\n      selectedDataSource: DataSource,\r\n    }));\r\n  };\r\n\r\n  return (\r\n    <Grid container style={{ flexWrap: \"nowrap\" }}>\r\n      <Grid\r\n        item\r\n        lg={2}\r\n        alignItems=\"center\"\r\n        direction=\"column\"\r\n        justifyContent=\"center\"\r\n      >\r\n        <Button\r\n          color=\"secondary\"\r\n          size=\"small\"\r\n          fullWidth\r\n          style={{ textTransform: \"none\" }}\r\n          variant=\"contained\"\r\n          onClick={() => resetSelectedDataSourceState()}\r\n        >\r\n          Create New DataSource\r\n        </Button>\r\n        <List\r\n          component=\"nav\"\r\n          subheader={\r\n            <ListSubheader component=\"div\" id=\"nested-list-subheader\">\r\n              Available DataSources\r\n            </ListSubheader>\r\n          }\r\n        >\r\n          {DataSourceManagementState.dataSources.map(\r\n            ({ id, name, type, data }) => (\r\n              <ListItem\r\n                button\r\n                selected={\r\n                  id === DataSourceManagementState.selectedDataSource.id\r\n                }\r\n                onClick={() =>\r\n                  updateSelectedDataSource({ id, name, type, data })\r\n                }\r\n              >\r\n                <ListItemText>\r\n                  <Box mr={1} component=\"span\">\r\n                    <Typography variant=\"body1\" component=\"span\">\r\n                      {name}\r\n                    </Typography>\r\n                  </Box>\r\n                </ListItemText>\r\n              </ListItem>\r\n            )\r\n          )}\r\n        </List>\r\n      </Grid>\r\n      <Grid item lg={10}>\r\n        {!DataSourceManagementState.selectedDataSource.name && (\r\n          <DataSourceComponent\r\n            type=\"add\"\r\n            title=\"Add DataSource\"\r\n            onSubmit={AddNewDataSource}\r\n          />\r\n        )}\r\n        {!!DataSourceManagementState.selectedDataSource.name && (\r\n          <DataSourceComponent\r\n            type=\"edit\"\r\n            title=\"Edit DataSource\"\r\n            DataSource={DataSourceManagementState.selectedDataSource}\r\n            onSubmit={EditDataSource}\r\n            deleteDataSource={deleteDataSource}\r\n          />\r\n        )}\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n","import React, { PureComponent } from 'react';\r\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\r\n\r\nexport const SimpleLineChartPreview = ( { data , key = \"name\" } ) => {\r\n    return (\r\n      <ResponsiveContainer width=\"99%\" minWidth={300} minHeight={300} style={{ background : 'white' }} >\r\n          <LineChart\r\n            width={300}\r\n            height={200}\r\n            data={data}\r\n            margin={{\r\n              top: 5,\r\n              right: 30,\r\n              left: 20,\r\n              bottom: 5,\r\n            }}\r\n          >\r\n            <CartesianGrid strokeDasharray=\"3 3\" />\r\n            <XAxis dataKey={Object.keys(data[0])[0]} />\r\n            <YAxis />\r\n            <Tooltip />\r\n            <Legend />\r\n            <Line type=\"monotone\" dataKey=\"pv\" stroke=\"#8884d8\" activeDot={{ r: 8 }} />\r\n            <Line type=\"monotone\" dataKey=\"uv\" stroke=\"#82ca9d\" />\r\n          </LineChart>\r\n        </ResponsiveContainer>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport {\r\n  AreaChart,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Area,\r\n  ResponsiveContainer,\r\n} from \"recharts\";\r\n\r\nexport const SimpleAreaChartPreview = ({ data, key = \"name\" }) => {\r\n  return (\r\n    <ResponsiveContainer\r\n      width=\"99%\"\r\n      minWidth={300}\r\n      minHeight={300}\r\n      style={{ background: \"white\" }}\r\n    >\r\n      <AreaChart\r\n        width={300}\r\n        height={200}\r\n        data={data}\r\n        margin={{\r\n          top: 5,\r\n          right: 30,\r\n          left: 20,\r\n          bottom: 5,\r\n        }}\r\n      >\r\n        <defs>\r\n          <linearGradient id=\"colorUv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n            <stop offset=\"5%\" stopColor=\"#8884d8\" stopOpacity={0.8} />\r\n            <stop offset=\"95%\" stopColor=\"#8884d8\" stopOpacity={0} />\r\n          </linearGradient>\r\n          <linearGradient id=\"colorPv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n            <stop offset=\"5%\" stopColor=\"#82ca9d\" stopOpacity={0.8} />\r\n            <stop offset=\"95%\" stopColor=\"#82ca9d\" stopOpacity={0} />\r\n          </linearGradient>\r\n        </defs>\r\n        <XAxis dataKey=\"name\" />\r\n        <YAxis />\r\n        <CartesianGrid strokeDasharray=\"3 3\" />\r\n        <Tooltip />\r\n        <Area\r\n          type=\"monotone\"\r\n          dataKey=\"uv\"\r\n          stroke=\"#8884d8\"\r\n          fillOpacity={1}\r\n          fill=\"url(#colorUv)\"\r\n        />\r\n        <Area\r\n          type=\"monotone\"\r\n          dataKey=\"pv\"\r\n          stroke=\"#82ca9d\"\r\n          fillOpacity={1}\r\n          fill=\"url(#colorPv)\"\r\n        />\r\n      </AreaChart>\r\n    </ResponsiveContainer>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport {\r\n  BarChart,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  ResponsiveContainer,\r\n  Legend,\r\n  Bar\r\n} from \"recharts\";\r\n\r\nexport const SimpleBarChartPreview = ({ data, key = \"name\" }) => {\r\n  return (\r\n    <ResponsiveContainer\r\n      width=\"99%\"\r\n      minWidth={300}\r\n      minHeight={300}\r\n      style={{ background: \"white\" }}\r\n    >\r\n      <BarChart\r\n        width={400}\r\n        height={200}\r\n        data={data}\r\n        margin={{\r\n          top: 5,\r\n          right: 30,\r\n          left: 20,\r\n          bottom: 5,\r\n        }}\r\n      >\r\n        <CartesianGrid strokeDasharray=\"3 3\" />\r\n        <XAxis dataKey=\"name\" />\r\n        <YAxis />\r\n        <Tooltip />\r\n        <Legend />\r\n        <Bar dataKey=\"pv\" fill=\"#8884d8\" />\r\n        <Bar dataKey=\"uv\" fill=\"#82ca9d\" />\r\n      </BarChart>\r\n    </ResponsiveContainer>\r\n  );\r\n};","import React from \"react\";\r\n\r\nimport {\r\n  Box,\r\n  TextField,\r\n  Container,\r\n  Grid,\r\n  Button,\r\n  Typography,\r\n  MenuItem,\r\n} from \"@material-ui/core\";\r\n\r\nimport { SimpleLineChartPreview } from './SimpleLineChartPreview';\r\nimport { SimpleAreaChartPreview } from './SimpleAreaChartPreview';\r\nimport { SimpleBarChartPreview } from './SimpleBarChartPreview';\r\n\r\nimport { PreviewTable } from \"./PreviewTable\";\r\nimport { useIndexedDB } from \"react-indexed-db\";\r\n\r\nexport const EditableComponent = (props) => {\r\n  const [component, updateComponent] = React.useState({\r\n    name: \"\",\r\n    type: \"default_option\",\r\n    data: [],\r\n    selectedDataSource : { data : [] , id : null , name : \"default_option\" , type : null },\r\n    datasource : null,\r\n    id : null\r\n  });\r\n\r\n  const {\r\n    title = \"Create Component\",\r\n    onSubmit,\r\n    Component,\r\n    type\r\n  } = props;\r\n\r\n  const {  getAll , getByIndex  } = useIndexedDB(\"datasources\");\r\n\r\n  React.useEffect(() => {\r\n    if (type === \"edit\") {\r\n      getByIndex('name',Component.datasource).then( selectedDataSource => {\r\n        updateComponent( prevState =>  ({ ...prevState , ...Component , selectedDataSource  }) ) \r\n      });\r\n    }\r\n     getAll().then((sources) => {\r\n      updateComponent((prevState) => ({\r\n        ...prevState,\r\n        data: sources,\r\n        loader: { message: \"Data Source List Fetched!\", status: false },\r\n      }));\r\n    })\r\n  },[Component]);\r\n\r\n  const updateState = (e, type) => {\r\n    updateComponent((prevState,nextState) => {\r\n      return { ...prevState, [type]: e.target.value } \r\n    });\r\n  };\r\n\r\n  const isTypeEdit = () => (type === \"edit\" ? true : false);\r\n\r\n  return (\r\n    <Container>\r\n\r\n      <Typography variant=\"body1\" gutterBottom>\r\n        {title}\r\n      </Typography>\r\n      <form\r\n        noValidate\r\n        autoComplete=\"off\"\r\n        onSubmit={(e) => {\r\n          e.preventDefault();\r\n          onSubmit({ name : component.name , datasource : component.selectedDataSource.name , type : component.type });\r\n          updateComponent((prevState) => ({\r\n            ...prevState,\r\n          name: \"\",\r\n          type: \"default_option\",\r\n          data: [],\r\n          selectedDataSource : { data : [] , id : null , name : \"default_option\" , type : null }\r\n  }\r\n  ));\r\n        }}\r\n      >\r\n        <Box m={1}>\r\n          <Grid container spacing={1}>\r\n            <Box m={1}>\r\n              <Grid container spacing={2}>\r\n                <Grid item>\r\n                  <TextField\r\n                    id=\"componentname\"\r\n                    placeholder=\"Componentname\"\r\n                    value={component.name}\r\n                    onChange={(e) => updateState(e, \"name\")}\r\n                    variant=\"outlined\"\r\n                    size=\"small\"\r\n                    disabled={isTypeEdit()}\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <TextField\r\n                    select\r\n                    size=\"small\"\r\n                    variant=\"outlined\"\r\n                    placeholder=\"Select a Component Type\"\r\n                    SelectProps={{\r\n                      value: component.type,\r\n                    }}\r\n                    onChange={(e) => updateState(e, \"type\")}\r\n                    disabled={isTypeEdit()}\r\n                  >\r\n                    <MenuItem value={\"default_option\"} disabled>\r\n                      Select a Component Type\r\n                    </MenuItem>\r\n                    <MenuItem value={\"table\"}>Table</MenuItem>\r\n                    <MenuItem value={\"simple_line_chart\"}>SimpleLineChart</MenuItem>\r\n                    <MenuItem value={\"simple_area_chart\"}>SimpleAreaChart</MenuItem>\r\n                    <MenuItem value={\"simple_bar_chart\"}>SimpleBarChart</MenuItem>\r\n                  </TextField>\r\n                </Grid>\r\n                <Grid item>\r\n                  <TextField\r\n                    select\r\n                    size=\"small\"\r\n                    variant=\"outlined\"\r\n                    placeholder=\"Select a Component Type\"\r\n                    SelectProps={{\r\n                      value: component.selectedDataSource.id != null ? component.selectedDataSource : \"default_option\",\r\n                    }}\r\n                    onChange={(e) => updateState(e, \"selectedDataSource\")}\r\n                    disabled={isTypeEdit()}\r\n                  >\r\n                    <MenuItem value=\"default_option\" disabled>\r\n                      Select a Data Source\r\n                    </MenuItem>\r\n                    {component.data.map( option => {\r\n                      return <MenuItem value={option}>{option.name}</MenuItem>\r\n                    } )}\r\n                    { isTypeEdit() && <MenuItem value={component.selectedDataSource} disabled>\r\n                      {component.selectedDataSource.name}\r\n                    </MenuItem> }\r\n\r\n                  </TextField>\r\n                </Grid>\r\n              </Grid>\r\n            </Box>\r\n            <Grid container style={{ margin: 8 }} spacing={2}>\r\n              <Grid item>\r\n              {!isTypeEdit() && (\r\n                <Button\r\n                  color=\"secondary\"\r\n                  fullWidth\r\n                  variant=\"contained\"\r\n                  size=\"small\"\r\n                  type=\"submit\"\r\n                  style={{ textTransform: \"none\" }}\r\n                >\r\n                  {title}\r\n                </Button>\r\n                )}\r\n              </Grid>\r\n              {isTypeEdit() && (\r\n                <Grid item>\r\n                  {/*<Button\r\n                    color=\"primary\"\r\n                    fullWidth\r\n                    variant=\"contained\"\r\n                    size=\"small\"\r\n                    onClick={(e) => {\r\n                      e.preventDefault();\r\n                      Component(component);\r\n                      Component((prevState) => ({\r\n                        ...prevState,\r\n                        componentname: \"\",\r\n                        password: \"\",\r\n                        role: \"\",\r\n                      }));\r\n                    }}\r\n                    style={{ textTransform: \"none\" }}\r\n                  >\r\n                    Delete Component\r\n                  </Button> */}\r\n                </Grid>\r\n              )}\r\n            </Grid>\r\n          </Grid>\r\n        </Box>\r\n      </form>\r\n      {component && component.data && (\r\n        <Grid container>\r\n          <Grid item>\r\n          {\r\n            component.type == \"table\" && component.selectedDataSource.data.length > 0 &&\r\n            <PreviewTable\r\n              rows={component.selectedDataSource.data}\r\n              column={Object.keys(component.selectedDataSource.data[0])}\r\n            />\r\n            }\r\n           {\r\n             component.type == \"simple_line_chart\" && component.selectedDataSource.data.length > 0 &&\r\n             <SimpleLineChartPreview data={component.selectedDataSource.data} />\r\n            }\r\n            {\r\n             component.type == \"simple_area_chart\" && component.selectedDataSource.data.length > 0 &&\r\n             <SimpleAreaChartPreview data={component.selectedDataSource.data} />\r\n            } \r\n            {\r\n             component.type == \"simple_bar_chart\" && component.selectedDataSource.data.length > 0 &&\r\n             <SimpleBarChartPreview data={component.selectedDataSource.data} />\r\n            }\r\n            \r\n\r\n          </Grid>\r\n        </Grid>\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport {\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  ListSubheader,\r\n  Chip,\r\n  Button,\r\n  Box,\r\n  Typography,\r\n  Grid,\r\n} from \"@material-ui/core\";\r\n\r\nimport { useIndexedDB } from \"react-indexed-db\";\r\n\r\nimport { EditableComponent } from './Component';\r\n\r\nexport const ComponentManagement = () => {\r\n  const [ComponentManagementState, updateComponentManagementState] =\r\n    React.useState({\r\n      components: [],\r\n      loader: {\r\n        status: true,\r\n        message: \"Fetching Available Data Source!!\",\r\n      },\r\n      error: {\r\n        status: false,\r\n        message: \"\",\r\n      },\r\n      selectedComponent: {},\r\n    });\r\n\r\n  const { add, getAll, update, deleteRecord } = useIndexedDB(\"components\");\r\n\r\n  React.useEffect(() => {\r\n    getAll().then((sources) => {\r\n      updateComponentManagementState((prevState) => ({\r\n        ...prevState,\r\n        components: sources,\r\n        loader: { message: \"Components List Fetched!\", status: false },\r\n      }));\r\n    });\r\n  }, [ComponentManagementState.loader.status]);\r\n\r\n  const AddNewComponent = async (component) => {\r\n    if (component) {\r\n      const event = await add(component);\r\n      updateComponentManagementState((prevState) => ({\r\n        ...prevState,\r\n        loader: { message: \"Updating Component List!\", status: true },\r\n      }));\r\n    }\r\n  };\r\n\r\n  const EditComponent = async ({ name, data }) => {\r\n    if (name) {\r\n      const event = await update({\r\n        ...ComponentManagementState.selectedComponent,\r\n        name,\r\n        data,\r\n      });\r\n      updateComponentManagementState((prevState) => ({\r\n        ...prevState,\r\n        selectedComponent: {},\r\n        loader: { message: \"Updating Component List!\", status: true },\r\n      }));\r\n    }\r\n  };\r\n\r\n  const deleteComponent = async (Component) => {\r\n    if (Component) {\r\n      const event = await deleteRecord(\r\n        ComponentManagementState.selectedComponent.id\r\n      );\r\n      updateComponentManagementState((prevState) => ({\r\n        ...prevState,\r\n        selectedComponent: {},\r\n        loader: { message: \"Updating Component List!\", status: true },\r\n      }));\r\n    }\r\n  };\r\n\r\n  const resetSelectedComponentState = () => {\r\n    updateComponentManagementState((prevState) => ({\r\n      ...prevState,\r\n      selectedComponent: {},\r\n    }));\r\n  };\r\n\r\n  const updateSelectedComponent = (component) => {\r\n    updateComponentManagementState((prevState) => ({\r\n      ...prevState,\r\n      selectedComponent: component,\r\n    }));\r\n  };\r\n\r\n  return (\r\n    <Grid container spacing={2} style={{ flexWrap: \"nowrap\" }}>\r\n      <Grid\r\n        item\r\n        lg={2}\r\n        alignItems=\"center\"\r\n        direction=\"column\"\r\n        justifyContent=\"center\"\r\n      >\r\n        <Button\r\n          color=\"secondary\"\r\n          size=\"small\"\r\n          fullWidth\r\n          style={{ textTransform: \"none\" }}\r\n          variant=\"contained\"\r\n          onClick={() => resetSelectedComponentState()}\r\n        >\r\n          Create New Component\r\n        </Button>\r\n        <List\r\n          component=\"nav\"\r\n          subheader={\r\n            <ListSubheader component=\"div\" id=\"nested-list-subheader\">\r\n              Available Components\r\n            </ListSubheader>\r\n          }\r\n        >\r\n          {ComponentManagementState.components.map(\r\n            ({ id, name, type, datasource }) => (\r\n              <ListItem\r\n                button\r\n                selected={\r\n                  id === ComponentManagementState.selectedComponent.id\r\n                }\r\n                onClick={() =>\r\n                  updateSelectedComponent({ id, name, type, datasource })\r\n                }\r\n              >\r\n                <ListItemText>\r\n                  <Box mr={1} component=\"span\">\r\n                    <Typography variant=\"body1\" component=\"span\">\r\n                      {name}\r\n                    </Typography>\r\n                  </Box>\r\n                </ListItemText>\r\n              </ListItem>\r\n            )\r\n          )}\r\n        </List>\r\n      </Grid>\r\n      <Grid item lg={10}>\r\n        {!ComponentManagementState.selectedComponent.name && (\r\n          <EditableComponent\r\n            type=\"add\"\r\n            title=\"Add Component\"\r\n            onSubmit={AddNewComponent}\r\n          />\r\n        )}\r\n        {!!ComponentManagementState.selectedComponent.name && (\r\n          <EditableComponent\r\n            type=\"edit\"\r\n            title=\"Edit Component\"\r\n            Component={ComponentManagementState.selectedComponent}\r\n            onSubmit={EditComponent}\r\n            deleteComponent={deleteComponent}\r\n          />\r\n        )}\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useIndexedDB } from \"react-indexed-db\";\r\nimport { Responsive, WidthProvider } from \"react-grid-layout\";\r\nimport GridLayout from \"react-grid-layout\";\r\n\r\nimport \"./DashboardPreview.css\";\r\n\r\nimport { SimpleLineChartPreview } from \"./SimpleLineChartPreview\";\r\nimport { SimpleAreaChartPreview } from './SimpleAreaChartPreview';\r\nimport { SimpleBarChartPreview } from './SimpleBarChartPreview';\r\n\r\nimport {\r\n  Typography,\r\n  Box\r\n} from \"@material-ui/core\";\r\n\r\nimport { PreviewTable } from \"./PreviewTable\";\r\n\r\nexport const DashboardPreview = ({ name, components }) => {\r\n  const datasources = useIndexedDB(\"datasources\");\r\n  const componentsDb = useIndexedDB(\"components\");\r\n  const ResponsiveReactGridLayout = WidthProvider(Responsive);\r\n  const [dashboard, updateDashboard] = React.useState({\r\n    data: [],\r\n  });\r\n\r\n  React.useEffect(async () => {\r\n    const sourcesList = await datasources.getAll();\r\n    const componentsList = await componentsDb.getAll();\r\n    const filteredData = componentsList\r\n      .filter(({ name }) => components.includes(name))\r\n      .map((component) => ({\r\n        ...component,\r\n        data: sourcesList\r\n          .filter((d) => d.name === component.datasource)\r\n          .map(({ data }) => data)\r\n          .flat(),\r\n      }));\r\n    updateDashboard((prevState) => ({\r\n      ...prevState,\r\n      data: filteredData,\r\n    }));\r\n  }, [components]);\r\n\r\n  const opts = {\r\n    compactType: \"horizontal\",\r\n    mounted: false,\r\n  };\r\n\r\n  const renderComponent = (type, data, name, i) => {\r\n    switch (type) {\r\n      case \"table\":\r\n        return (\r\n          <PreviewTable\r\n            key={`${new Date().getTime()}-${i}`}\r\n            title={`Preview Table - ${name}`}\r\n            rows={data}\r\n            totalRows={3}\r\n            totalCols={3}\r\n            column={Object.keys(data[0])}\r\n          />\r\n        );\r\n      case \"simple_line_chart\":\r\n        return (\r\n          <SimpleLineChartPreview\r\n            key={`${new Date().getTime()}-${i}`}\r\n            title={`Preview Chart - ${name}`}\r\n            data={data}\r\n          />\r\n        );\r\n      case \"simple_bar_chart\":\r\n        return (\r\n          <SimpleBarChartPreview\r\n            key={`${new Date().getTime()}-${i}`}\r\n            title={`Preview Chart - ${name}`}\r\n            data={data}\r\n          />\r\n        );\r\n      case \"simple_area_chart\":\r\n        return (\r\n          <SimpleAreaChartPreview\r\n            key={`${new Date().getTime()}-${i}`}\r\n            title={`Preview Chart - ${name}`}\r\n            data={data}\r\n          />\r\n        );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box p={1} m={1}>\r\n      <Typography variant=\"h6\" gutterBottom>{name && name[0].toUpperCase() + name.slice(1,name.length)}</Typography>\r\n      <ResponsiveReactGridLayout\r\n        measureBeforeMount={true}\r\n        useCSSTransforms={opts.mounted}\r\n        compactType={opts.compactType}\r\n        preventCollision={!opts.compactType}\r\n      >\r\n        {dashboard.data.map((d, i) => (\r\n          <div\r\n            key={`${new Date().getTime()}-${i}`}\r\n            data-grid={{\r\n              x: i * 3,\r\n              y: 0,\r\n              w: 3,\r\n              h: 2,\r\n              static: false,\r\n            }}\r\n            style={{\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n              alignItems: \"center\",\r\n              padding: 8,\r\n            }}\r\n          >\r\n            {renderComponent(d.type, d.data, d.name, i)}\r\n          </div>\r\n        ))}\r\n      </ResponsiveReactGridLayout>\r\n    </Box>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nimport {\r\n  Box,\r\n  TextField,\r\n  Container,\r\n  FormControl,\r\n  FormControlLabel,\r\n  FormLabel,\r\n  InputLabel,\r\n  Input,\r\n  Grid,\r\n  Button,\r\n  RadioGroup,\r\n  Typography,\r\n  Radio,\r\n  ListItemText,\r\n  Select,\r\n  Checkbox,\r\n  MenuItem,\r\n} from \"@material-ui/core\";\r\n\r\nimport { PreviewTable } from \"./PreviewTable\";\r\nimport { useIndexedDB } from \"react-indexed-db\";\r\nimport { DashboardPreview } from \"./DashboardPreview\";\r\n\r\nexport const DashboardComponent = (props) => {\r\n  const [dashboard, updateDashboard] = React.useState({\r\n    name: \"\",\r\n    users: {\r\n      list: [],\r\n      selectedUser: [],\r\n    },\r\n    components: {\r\n      list: [],\r\n      selectedComponent: [],\r\n    },\r\n  });\r\n\r\n  const {\r\n    title = \"Create Dashboard\",\r\n    onSubmit,\r\n    Dashboard,\r\n    type,\r\n    deleteDashboard,\r\n  } = props;\r\n\r\n  const users = useIndexedDB(\"users\");\r\n  const components = useIndexedDB(\"components\");\r\n\r\n  React.useEffect(() => {\r\n    if (type === \"edit\") {\r\n      console.log(Dashboard);\r\n      updateDashboard((prevState) => ({\r\n        ...prevState,\r\n        name: Dashboard.name,\r\n        components: {\r\n          ...prevState.components,\r\n          selectedComponent: Dashboard.components,\r\n        },\r\n        users: { ...prevState.users, selectedUser: Dashboard.assigned_users },\r\n      }));\r\n    }\r\n    users.getAll().then((users) => {\r\n      updateDashboard((prevState) => ({\r\n        ...prevState,\r\n        users: { ...prevState.users, list: users },\r\n        loader: { message: \"User List Fetched!\", status: false },\r\n      }));\r\n    });\r\n    components.getAll().then((components) => {\r\n      updateDashboard((prevState) => ({\r\n        ...prevState,\r\n        components: { ...prevState.components, list: components },\r\n        loader: { message: \"Components List Fetched!\", status: false },\r\n      }));\r\n    });\r\n  }, [Dashboard]);\r\n\r\n  const updateState = (e, type) => {\r\n    updateDashboard((prevState) => ({ ...prevState, [type]: e.target.value }));\r\n  };\r\n\r\n  const handleChange = (event) => {\r\n    updateDashboard((prevState) => {\r\n      return {\r\n        ...prevState,\r\n        components: {\r\n          ...prevState.components,\r\n          selectedComponent: event.target.value,\r\n        },\r\n      };\r\n    });\r\n  };\r\n\r\n  const handleUserSelection = (e) => {\r\n    updateDashboard((prevState) => {\r\n      return {\r\n        ...prevState,\r\n        users: { ...prevState.users, selectedUser: e.target.value },\r\n      };\r\n    });\r\n  };\r\n\r\n  const isTypeEdit = () => (type === \"edit\" ? true : false);\r\n\r\n  return (\r\n    <Container>\r\n      <Typography variant=\"body1\" gutterBottom>\r\n        {title}\r\n      </Typography>\r\n      <form\r\n        noValidate\r\n        autoComplete=\"off\"\r\n        onSubmit={(e) => {\r\n          e.preventDefault();\r\n          onSubmit({\r\n            name: dashboard.name,\r\n            components: dashboard.components.selectedComponent,\r\n            assigned_users: dashboard.users.selectedUser,\r\n          });\r\n          updateDashboard((prevState) => ({\r\n            name: \"\",\r\n            type: \"default_option\",\r\n            data: null,\r\n            users: {\r\n              list: [],\r\n              selectedUser: [],\r\n            },\r\n            components: {\r\n              list: [],\r\n              selectedComponent: [],\r\n            },\r\n          }));\r\n        }}\r\n      >\r\n        <Box m={1}>\r\n          <Grid container spacing={1}>\r\n            <Box m={1}>\r\n              <Grid container spacing={2}>\r\n                <Grid item>\r\n                  <TextField\r\n                    id=\"dashboardname\"\r\n                    placeholder=\"Dashboardname\"\r\n                    value={dashboard.name}\r\n                    onChange={(e) => updateState(e, \"name\")}\r\n                    variant=\"outlined\"\r\n                    size=\"small\"\r\n                    disabled={isTypeEdit()}\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <TextField\r\n                    select\r\n                    size=\"small\"\r\n                    variant=\"outlined\"\r\n                    label=\"Assign Users\"\r\n                    style={{ minWidth: 240 }}\r\n                    SelectProps={{\r\n                      multiple: true,\r\n                      value: dashboard.users.selectedUser,\r\n                      renderValue: (selected) => selected.join(\", \"),\r\n                    }}\r\n                    onChange={handleUserSelection}\r\n                    // disabled={isTypeEdit()}\r\n                  >\r\n                    {dashboard.users.list.map((user) => (\r\n                      <MenuItem key={user.username} value={user.username}>\r\n                        <Checkbox\r\n                          checked={\r\n                            dashboard.users.selectedUser.indexOf(\r\n                              user.username\r\n                            ) > -1\r\n                          }\r\n                        />\r\n                        <ListItemText primary={user.username} />\r\n                      </MenuItem>\r\n                    ))}\r\n                  </TextField>\r\n                </Grid>\r\n                <Grid item>\r\n                  <TextField\r\n                    select\r\n                    size=\"small\"\r\n                    variant=\"outlined\"\r\n                    label=\"Select Components\"\r\n                    style={{ minWidth: 240 }}\r\n                    SelectProps={{\r\n                      multiple: true,\r\n                      value: dashboard.components.selectedComponent,\r\n                      renderValue: (selected) => selected.join(\", \"),\r\n                    }}\r\n                    onChange={handleChange}\r\n                    // disabled={isTypeEdit()}\r\n                  >\r\n                    {dashboard.components.list.map((component) => (\r\n                      <MenuItem key={component.name} value={component.name}>\r\n                        <Checkbox\r\n                          checked={\r\n                            dashboard.components.selectedComponent.indexOf(\r\n                              component.name\r\n                            ) > -1\r\n                          }\r\n                        />\r\n                        <ListItemText primary={component.name} />\r\n                      </MenuItem>\r\n                    ))}\r\n                  </TextField>\r\n                </Grid>\r\n              </Grid>\r\n            </Box>\r\n            <Grid container style={{ margin: 8 }} spacing={2}>\r\n              <Grid item>\r\n                <Button\r\n                  color=\"secondary\"\r\n                  fullWidth\r\n                  variant=\"contained\"\r\n                  size=\"small\"\r\n                  type=\"submit\"\r\n                  style={{ textTransform: \"none\" }}\r\n                >\r\n                  {title}\r\n                </Button>\r\n              </Grid>\r\n              {isTypeEdit() && (\r\n                <Grid item>\r\n                  <Button\r\n                    color=\"primary\"\r\n                    fullWidth\r\n                    variant=\"contained\"\r\n                    size=\"small\"\r\n                    onClick={(e) => {\r\n                      e.preventDefault();\r\n                      deleteDashboard(dashboard);\r\n                      updateDashboard((prevState) => ({\r\n                        ...prevState,\r\n                        dashboardname: \"\",\r\n                        password: \"\",\r\n                        role: \"\",\r\n                      }));\r\n                    }}\r\n                    style={{ textTransform: \"none\" }}\r\n                  >\r\n                    Delete Dashboard\r\n                  </Button>\r\n                </Grid>\r\n              )}\r\n            </Grid>\r\n          </Grid>\r\n        </Box>\r\n      </form>\r\n      {dashboard && dashboard.components.selectedComponent && (\r\n        <DashboardPreview\r\n          name={dashboard.name}\r\n          components={dashboard.components.list.filter((component) =>\r\n            dashboard.components.selectedComponent.includes(component.name)).map( ({name}) => name)}\r\n        />\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport {\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  ListSubheader,\r\n  Chip,\r\n  Button,\r\n  Box,\r\n  Typography,\r\n  Grid,\r\n} from \"@material-ui/core\";\r\n\r\nimport { useIndexedDB } from \"react-indexed-db\";\r\n\r\nimport {DashboardComponent} from './DashboardComponent'\r\n\r\nexport const DashboardManagement = () => {\r\n  const [DashboardManagementState, updateDashboardManagementState] =\r\n    React.useState({\r\n      dashboards: [],\r\n      loader: {\r\n        status: true,\r\n        message: \"Fetching Available Data Source!!\",\r\n      },\r\n      error: {\r\n        status: false,\r\n        message: \"\",\r\n      },\r\n      selectedDashboard: {},\r\n    });\r\n\r\n  const { add, getAll, update, deleteRecord } = useIndexedDB(\"dashboards\");\r\n\r\n  React.useEffect(() => {\r\n    getAll().then( dashboards => {\r\n      updateDashboardManagementState((prevState) => ({\r\n        ...prevState,\r\n        dashboards ,\r\n        loader: { message: \"Dashboards List Fetched!\", status: false },\r\n      }));\r\n    });\r\n  }, [DashboardManagementState.loader.status]);\r\n\r\n  const AddNewDashboard = async (dashboard) => {\r\n    if (dashboard) {\r\n      const event = await add(dashboard);\r\n      updateDashboardManagementState((prevState) => ({\r\n        ...prevState,\r\n        loader: { message: \"Updating Dashboard List!\", status: true },\r\n      }));\r\n    }\r\n  };\r\n\r\n  const EditDashboard = async ({ name, components , assigned_users }) => {\r\n    if (name) {\r\n      const event = await update({\r\n        ...DashboardManagementState.selectedDashboard,\r\n        components,\r\n        assigned_users\r\n      });\r\n      updateDashboardManagementState((prevState) => ({\r\n        ...prevState,\r\n        selectedDashboard: {},\r\n        loader: { message: \"Updating Dashboard List!\", status: true },\r\n      }));\r\n    }\r\n  };\r\n\r\n  const deleteDashboard = async (Dashboard) => {\r\n    if (Dashboard) {\r\n      const event = await deleteRecord(\r\n        DashboardManagementState.selectedDashboard.id\r\n      );\r\n      updateDashboardManagementState((prevState) => ({\r\n        ...prevState,\r\n        selectedDashboard: {},\r\n        loader: { message: \"Updating Dashboard List!\", status: true },\r\n      }));\r\n    }\r\n  };\r\n\r\n  const resetSelectedDashboardState = () => {\r\n    updateDashboardManagementState((prevState) => ({\r\n      ...prevState,\r\n      selectedDashboard: {},\r\n    }));\r\n  };\r\n\r\n  const updateSelectedDashboard = (component) => {\r\n    updateDashboardManagementState((prevState) => ({\r\n      ...prevState,\r\n      selectedDashboard: component,\r\n    }));\r\n  };\r\n\r\n  return (\r\n    <Grid container spacing={2} style={{ flexWrap: \"nowrap\" }}>\r\n      <Grid\r\n        item\r\n        lg={2}\r\n      >\r\n        <Button\r\n          color=\"secondary\"\r\n          size=\"small\"\r\n          fullWidth\r\n          style={{ textTransform: \"none\" }}\r\n          variant=\"contained\"\r\n          onClick={() => resetSelectedDashboardState()}\r\n        >\r\n          Create New Dashboard\r\n        </Button>\r\n        <List\r\n          component=\"nav\"\r\n          subheader={\r\n            <ListSubheader component=\"div\" id=\"nested-list-subheader\">\r\n              Available Dashboards\r\n            </ListSubheader>\r\n          }\r\n        >\r\n          {DashboardManagementState.dashboards.map(\r\n            ({ id, name, components , assigned_users },index) => (\r\n              <ListItem\r\n                key={`ds-mgmt-list-${index}`}\r\n                button\r\n                selected={\r\n                  id === DashboardManagementState.selectedDashboard.id\r\n                }\r\n                onClick={() =>\r\n                  updateSelectedDashboard({ id, name, components , assigned_users })\r\n                }\r\n              >\r\n                <ListItemText>\r\n                  <Box mr={1} component=\"span\">\r\n                    <Typography variant=\"body1\" component=\"span\">\r\n                      {name}\r\n                    </Typography>\r\n                  </Box>\r\n                </ListItemText>\r\n              </ListItem>\r\n            )\r\n          )}\r\n        </List>\r\n      </Grid>\r\n      <Grid item lg={10}>\r\n        {!DashboardManagementState.selectedDashboard.name && (\r\n          <DashboardComponent\r\n            type=\"add\"\r\n            title=\"Add Dashboard\"\r\n            onSubmit={AddNewDashboard}\r\n          />\r\n        )}\r\n        {!!DashboardManagementState.selectedDashboard.name && (\r\n          <DashboardComponent\r\n            type=\"edit\"\r\n            title=\"Edit Dashboard\"\r\n            Dashboard={DashboardManagementState.selectedDashboard}\r\n            onSubmit={EditDashboard}\r\n            deleteDashboard={deleteDashboard}\r\n          />\r\n        )}\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport {\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  ListSubheader,\r\n  Chip,\r\n  Button,\r\n  Box,\r\n  Typography,\r\n  Grid,\r\n} from \"@material-ui/core\";\r\n\r\nimport { useIndexedDB } from \"react-indexed-db\";\r\nimport useAuth , { ProvideAuth } from './Auth.Context';\r\nimport {loginContext} from './Login.Context';\r\nimport { DashboardPreview } from \"./DashboardPreview\";\r\n\r\n\r\nexport const MyDashboard = () => {\r\n\r\n  const { user }  = useAuth();\r\n  const { getByIndex, getAll, update, deleteRecord } = useIndexedDB(\"dashboards\");\r\n\r\n  const [myDashboards,updateMyDashboards] = React.useState([])\r\n\r\n  React.useEffect(() => {\r\n    if(user) {\r\n      getAll().then( dashboards => {\r\n        const filteredList = dashboards.filter( dashboard => dashboard.assigned_users.includes(user.username) )\r\n        updateMyDashboards(filteredList);\r\n      })\r\n    }\r\n  },[])\r\n\r\n\r\n  return(\r\n    <Box>\r\n      { user && user.isAuthenticated &&  myDashboards.length > 0 ? myDashboards.map( dashboard => <span> <DashboardPreview  name={dashboard.name} components={dashboard.components}  /> </span> ) : <Typography variant=\"body1\">No Dashboards Available.</Typography> }\r\n      { !user && <Typography variant=\"body1\"> User Need To Login </Typography> }\r\n    </Box>\r\n    )\r\n}","import React from \"react\";\r\nimport \"./styles.css\";\r\n\r\n// import { DBConfig } from \"./DbConfig\";\r\nimport { Box , Typography } from \"@material-ui/core\";\r\nimport { BrowserRouter as Router , Redirect, Switch, Route } from \"react-router-dom\";\r\nimport { Header } from \"./Header\";\r\n\r\nimport { Login } from \"./Login\";\r\n\r\nimport { UserManagement } from \"./UserManagement\";\r\nimport { DataSourceManagement } from \"./DataSource\";\r\nimport { ComponentManagement } from \"./ComponentsManagement\";\r\nimport { DashboardManagement } from \"./DashboardManagement\";\r\nimport { MyDashboard } from \"./MyDashboards\";\r\n\r\nimport { initDB, IndexedDB } from \"react-indexed-db\";\r\n\r\nimport {loginContext} from './Login.Context';\r\n\r\nimport useAuth , { ProvideAuth } from './Auth.Context';\r\n\r\nlet DBConfig = {\r\n  name: \"TechChallenge\",\r\n  version: 5,\r\n  objectStoresMeta: [\r\n    {\r\n      store: \"users\",\r\n      storeConfig: { keyPath: \"id\", autoIncrement: true },\r\n      storeSchema: [\r\n        { name: \"username\", keypath: \"username\", options: { unique: true } },\r\n        { name: \"password\", keypath: \"password\", options: { unique: false } },\r\n        { name: \"role\", keypath: \"role\", options: { unique: false } },\r\n      ],\r\n    },\r\n    {\r\n      store: \"datasources\",\r\n      storeConfig: { keyPath: \"id\", autoIncrement: true },\r\n      storeSchema: [\r\n        { name: \"name\", keypath: \"name\", options: { unique: true } },\r\n        { name: \"type\", keypath: \"type\", options: { unique: false } },\r\n        { name: \"path\", keypath: \"path\", options: { unique: true } },\r\n        { name: \"dataset\", keypath: \"dataset\", options: { unique: false } },\r\n      ],\r\n    },\r\n    {\r\n      store: \"components\",\r\n      storeConfig: { keyPath: \"id\", autoIncrement: true },\r\n      storeSchema: [\r\n        { name: \"name\", keypath: \"name\", options: { unique: true } },\r\n        { name: \"type\", keypath: \"type\", options: { unique: false } },\r\n        { name: \"datasource\", keypath: \"datasource\", options: { unique: false } },\r\n        { name: \"config\", keypath: \"config\", options: { unique: false } },\r\n      ],\r\n    },\r\n    {\r\n      store: \"dashboards\",\r\n      storeConfig: { keyPath: \"id\", autoIncrement: true },\r\n      storeSchema: [\r\n        { name: \"name\", keypath: \"name\", options: { unique: true } },\r\n        { name: \"components\", keypath: \"components\", options: { unique: false } },\r\n        { name: \"assigned_users\", keypath: \"assigned_users\", options: { unique: false } },\r\n      ],\r\n    }\r\n  ],\r\n};\r\n\r\ninitDB(DBConfig);\r\n\r\nfunction PrivateRoute({ children, ...rest }) {\r\n  let auth = useAuth();\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={({ location }) =>\r\n        auth.user && auth.user.role ==\"admin\" ? (\r\n          children\r\n        ) : (\r\n          <Redirect\r\n            to={{\r\n              pathname: \"/\",\r\n            }}\r\n          />\r\n        )\r\n      }\r\n    />\r\n  );\r\n}\r\n\r\nexport default function App() {\r\n\r\n\r\n  return (\r\n    <ProvideAuth>\r\n    <Router basename=\"/react-dashboard-generator\">\r\n      <Header />\r\n      <Box style={{ marginTop: 72 }}>\r\n        <Switch>\r\n          <PrivateRoute path=\"/datasources\">\r\n                <DataSourceManagement />\r\n          </PrivateRoute>\r\n          <PrivateRoute  path=\"/usermanagement\">\r\n              <UserManagement />\r\n          </PrivateRoute>\r\n          <PrivateRoute path=\"/components\">\r\n              <ComponentManagement/>\r\n          </PrivateRoute>\r\n          <PrivateRoute path='/dashboard'>\r\n              <DashboardManagement/>\r\n          </PrivateRoute>\r\n          <Route path='/my-dashboard'>\r\n            <MyDashboard />\r\n          </Route>\r\n          <Route path=\"**\">\r\n            <Login/>\r\n          </Route>\r\n        </Switch>\r\n      </Box>\r\n    </Router>\r\n    </ProvideAuth>\r\n  );\r\n}\r\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n    <App /> ,\n  rootElement\n);\n"],"sourceRoot":""}