{"version":3,"sources":["Login.Context.js","Auth.Context.js","Header.js","Login.js","UserComponent.js","UserManagement.js","PreviewTable.js","DataSourceComponent.js","DataSource.js","Component.js","ComponentsManagement.js","DashboardPreview.js","DashboardComponent.js","DashboardManagement.js","MyDashboards.js","App.js","index.js"],"names":["fakeAuth","isAuthenticated","isUserAdmin","username","signin","userName","userRole","cb","setTimeout","signout","loginContext","React","createContext","authContext","ProvideAuth","children","auth","useState","user","setUser","role","console","log","isUserLoggedIn","useProvideAuth","Provider","value","useAuth","useContext","Header","history","useHistory","AppBar","elevation","Toolbar","IconButton","component","NavigationLink","to","edge","color","Contactless","Box","mx","Link","variant","underline","display","ml","onClick","push","ExitToApp","Login","useIndexedDB","getByIndex","add","useEffect","then","admin","undefined","password","errors","message","status","creds","updateCreds","authenticateUser","e","a","preventDefault","prevState","updateInputValue","type","target","justifyContent","alignItems","my","p","Card","style","padding","CardHeader","avatar","Avatar","title","titleTypographyProps","onSubmit","CardContent","flexDirection","TextField","placeholder","size","fullWidth","onChange","marginBottom","CardActions","disableSpacing","px","width","Button","Typography","textAlign","UserComponent","props","updateUser","User","deleteUser","updateState","isTypeEdit","Container","gutterBottom","noValidate","autoComplete","m","Grid","container","spacing","item","id","disabled","FormControl","FormLabel","RadioGroup","name","row","FormControlLabel","control","Radio","label","textTransform","UserManagement","users","loader","error","selectedUser","UserManagementState","updateUserManagementState","getAll","update","deleteRecord","AddNewUser","EditUser","lg","direction","List","subheader","ListSubheader","map","ListItem","button","selected","ListItemText","mr","Chip","PreviewTable","rows","column","totalRows","totalCols","TableContainer","Paper","Table","TableHead","TableRow","header","colIndex","TableCell","toUpperCase","TableBody","index","scope","DataSourceComponent","data","dataSource","updateDataSource","DataSource","deleteDataSource","select","SelectProps","MenuItem","margin","hidden","FileReaderCursor","FileReader","onloadend","parsedRecords","JSON","parse","result","length","files","fileData","split","pop","toLowerCase","alert","readAsText","dataSourcename","Object","keys","DataSourceManagement","dataSources","selectedDataSource","DataSourceManagementState","updateDataSourceManagementState","sources","AddNewDataSource","EditDataSource","flexWrap","EditableComponent","datasource","updateComponent","Component","nextState","option","ComponentManagement","components","selectedComponent","ComponentManagementState","updateComponentManagementState","AddNewComponent","EditComponent","deleteComponent","DashboardPreview","datasources","componentsDb","ResponsiveReactGridLayout","WidthProvider","Responsive","dashboard","updateDashboard","sourcesList","componentsList","filteredData","filter","includes","d","flat","opts","measureBeforeMount","useCSSTransforms","compactType","preventCollision","i","x","y","w","h","static","Date","getTime","DashboardComponent","list","Dashboard","deleteDashboard","assigned_users","minWidth","multiple","renderValue","join","event","Checkbox","checked","indexOf","primary","dashboardname","DashboardManagement","dashboards","selectedDashboard","DashboardManagementState","updateDashboardManagementState","AddNewDashboard","EditDashboard","MyDashboard","myDashboards","updateMyDashboards","filteredList","PrivateRoute","rest","render","location","pathname","App","marginTop","path","exact","initDB","version","objectStoresMeta","store","storeConfig","keyPath","autoIncrement","storeSchema","keypath","options","unique","rootElement","document","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.c57033e2.chunk.js","sourcesContent":["import React , {useState} from 'react';\r\n\r\nconst fakeAuth = {\r\n  isAuthenticated: false,\r\n  isUserAdmin : false , \r\n  username : '' ,\r\n  signin(userName,userRole,cb) {\r\n    fakeAuth.isAuthenticated = true;\r\n    fakeAuth.isUserAdmin = false;\r\n    fakeAuth.username = userName;\r\n    if(userRole == \"admin\") {\r\n      fakeAuth.isUserAdmin = true;\r\n    }\r\n    setTimeout(cb, 100); // fake async\r\n  },\r\n  signout(cb) {\r\n    fakeAuth.isAuthenticated = false;\r\n    fakeAuth.isUserAdmin = false;\r\n    setTimeout(cb, 100);\r\n  }\r\n};\r\n\r\nexport const loginContext = React.createContext(fakeAuth)\r\n","import React , { createContext , useContext , useState } from \"react\";\r\n\r\nconst authContext = createContext();\r\n\r\nconst fakeAuth = {\r\n  isAuthenticated: false,\r\n  isUserAdmin : false , \r\n  username : '' ,\r\n  signin(userName,userRole,cb) {\r\n    fakeAuth.isAuthenticated = true;\r\n    fakeAuth.isUserAdmin = false;\r\n    fakeAuth.username = userName;\r\n    if(userRole == \"admin\") {\r\n      fakeAuth.isUserAdmin = true;\r\n    }\r\n    setTimeout(cb, 100); // fake async\r\n  },\r\n  signout(cb) {\r\n    fakeAuth.isAuthenticated = false;\r\n    fakeAuth.isUserAdmin = false;\r\n    fakeAuth.username = '';\r\n    setTimeout(cb, 100);\r\n  }\r\n};\r\n\r\n\r\nfunction useProvideAuth() {\r\n  const [user, setUser] = useState(null);\r\n\r\n  const signin = (username , role , cb) => {\r\n    return fakeAuth.signin(username , role , () => {\r\n    console.log(username,role)\r\n      setUser({ username  , role , isAuthenticated : true , isUserLoggedIn : true });\r\n      cb();\r\n    });\r\n  };\r\n\r\n  const signout = cb => {\r\n    return fakeAuth.signout(() => {\r\n      setUser(null);\r\n      cb();\r\n    });\r\n  };\r\n\r\n  return {\r\n    user,\r\n    signin,\r\n    signout\r\n  };\r\n}\r\n\r\nexport function ProvideAuth({ children }) {\r\n  const auth = useProvideAuth();\r\n  return (\r\n    <authContext.Provider value={auth}>\r\n      {children}\r\n    </authContext.Provider>\r\n  );\r\n}\r\n\r\nexport default function useAuth() {\r\n  return useContext(authContext);\r\n}","import React from \"react\";\r\nimport { AppBar, Toolbar, Box, IconButton, Link } from \"@material-ui/core\";\r\nimport { Link as NavigationLink } from \"react-router-dom\";\r\nimport { Contactless, ExitToApp, AccountCircle } from \"@material-ui/icons\";\r\n\r\nimport {loginContext} from './Login.Context';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport useAuth , { ProvideAuth } from './Auth.Context';\r\n\r\n\r\nexport const Header = () => {\r\n\r\n  const { user , signout }  = useAuth();\r\n  const history = useHistory()\r\n\r\n  return (\r\n    <AppBar elevation={0}>\r\n      <Toolbar>\r\n        <IconButton\r\n          component={NavigationLink}\r\n          to=\"/\"\r\n          edge=\"start\"\r\n          color=\"inherit\"\r\n        >\r\n          <Contactless />\r\n        </IconButton>\r\n        <Box mx={1}>\r\n            <Link\r\n              color=\"inherit\"\r\n              variant=\"body1\"\r\n              component={NavigationLink}\r\n              to=\"/my-dashboard\"\r\n              underline=\"none\"\r\n            >\r\n              My Dashboards\r\n            </Link>\r\n        </Box>\r\n        <Box display=\"flex\">\r\n          { user && user.role == \"admin\" && <Box mx={1}>\r\n            <Link\r\n              color=\"inherit\"\r\n              variant=\"body1\"\r\n              component={NavigationLink}\r\n              to=\"/datasources\"\r\n              underline=\"none\"\r\n            >\r\n              DataSources\r\n            </Link>\r\n          </Box>}\r\n          { user && user.role == \"admin\" && <Box mx={1}>\r\n            <Link\r\n              color=\"inherit\"\r\n              variant=\"body1\"\r\n              component={NavigationLink}\r\n              to=\"/components\"\r\n              underline=\"none\"\r\n            >\r\n              Components\r\n            </Link>\r\n          </Box>}\r\n          { user && user.role == \"admin\" && <Box mx={1}>\r\n            <Link\r\n              color=\"inherit\"\r\n              variant=\"body1\"\r\n              component={NavigationLink}\r\n              to=\"/usermanagement\"\r\n              underline=\"none\"\r\n            >\r\n              User Management\r\n            </Link>\r\n          </Box>}\r\n          { user && user.role == \"admin\" && <Box mx={1}>\r\n            <Link\r\n              color=\"inherit\"\r\n              variant=\"body1\"\r\n              component={NavigationLink}\r\n              to=\"/dashboard\"\r\n              underline=\"none\"\r\n            >\r\n              Dashboard Management\r\n            </Link>\r\n          </Box>}\r\n        </Box>\r\n        { user && user.isAuthenticated && <Box ml=\"auto\">\r\n           <IconButton edge=\"end\" color=\"inherit\" onClick={() => signout( () => history.push('/') )}>\r\n            <ExitToApp />\r\n          </IconButton>\r\n        </Box>}\r\n      </Toolbar>\r\n    </AppBar>\r\n  )\r\n}\r\n","import React , { useEffect } from 'react';\r\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\r\nimport clsx from 'clsx';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nimport { useIndexedDB } from 'react-indexed-db';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport {loginContext} from './Login.Context';\r\nimport useAuth from './Auth.Context';\r\n\r\n\r\nexport const Login = () => {\r\n\r\n  const { isAuthenticated , isUserAdmin , signin }  = React.useContext(loginContext);\r\n\r\n  const auth = useAuth();\r\n\r\n  const { getByIndex , add  } = useIndexedDB('users');\r\n\r\n  const history = useHistory()\r\n\r\n  useEffect(() => {\r\n\r\n    if(isAuthenticated) {\r\n      return history.push('/datasources')\r\n    }\r\n    getByIndex('username', 'admin').then( admin => {\r\n        if(admin == undefined) {\r\n            add({ username : 'admin' , password : 'admin' , role : 'admin' })\r\n        }\r\n    });\r\n  }, []);\r\n\r\n\r\n  const [creds,updateCreds] = React.useState({ username : '' , password : '' , errors : { message : '' , status : false } })\r\n\r\n\r\n  const authenticateUser = async e => {\r\n    e.preventDefault();\r\n    if( creds.username && creds.password ) {\r\n      const user = await getByIndex('username',creds.username)\r\n\r\n      if( user && user.password === creds.password ) {\r\n        // sessionStorage.setItem(\"isUserLoggedIn\" , true)\r\n        return auth.signin( user.username , user.role , () => history.push('/my-dashboard') )\r\n        // return signin( user.username , user.role ,  () => history.push('/my-dashboard'));\r\n      }\r\n\r\n      if(!user) {\r\n        return updateCreds( prevState => ({ ...prevState , username : '' , password : '' , errors : { message : 'User Not Found! Try Again' , status : true } }) );\r\n      }\r\n      \r\n      return updateCreds( prevState => ({ ...prevState , password : '' , errors : { message : 'Invalid Password!!' , status : true } }) );\r\n    }\r\n\r\n    return updateCreds( prevState => ({ ...prevState , errors : { message : 'Enter Credentials!!' , status : true } }) );\r\n\r\n  }\r\n\r\n  const updateInputValue = (e,type) => updateCreds( prevState => ({ ...prevState , [type] : e.target.value }) )\r\n\r\n  return (\r\n    <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" my={3} p={2} mx=\"auto\">\r\n    <Card style={{ padding : 8 }}>\r\n      <CardHeader\r\n        avatar={\r\n          <Avatar aria-label=\"recipe\">\r\n            L\r\n          </Avatar>\r\n        }\r\n        title=\"User Login\"\r\n        titleTypographyProps={{ variant : 'h6' }}\r\n      />\r\n      <form onSubmit={authenticateUser}>\r\n      <CardContent>\r\n        <Box display=\"flex\" flexDirection=\"column\">\r\n           <TextField\r\n              placeholder=\"Username\"\r\n              size=\"small\"\r\n              variant=\"outlined\"\r\n              fullWidth={true}\r\n              value={creds.username}\r\n              onChange={(e) => updateInputValue(e,'username')}\r\n              style={{ marginBottom : 16 }}\r\n            />\r\n            <TextField\r\n              placeholder=\"Password\"\r\n              size=\"small\"\r\n              variant=\"outlined\"\r\n              type=\"password\"\r\n              value={creds.password}\r\n              onChange={(e) => updateInputValue(e,'password')}\r\n              fullWidth={true}\r\n            />\r\n            </Box>\r\n        </CardContent>\r\n        <CardActions disableSpacing>\r\n        <Box px={1} width=\"100%\">\r\n\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              type=\"submit\"\r\n              fullWidth={true}\r\n            >\r\n              Login\r\n            </Button>\r\n            </Box>\r\n        </CardActions>\r\n      </form>\r\n      { creds.errors.status && <Typography variant=\"body2\">\r\n          <Box color=\"error.main\"  textAlign=\"center\">\r\n            { creds.errors.message }\r\n          </Box>\r\n        </Typography> \r\n      }\r\n    </Card>\r\n    </Box>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport {\r\n  Box,\r\n  TextField,\r\n  Container,\r\n  FormControl,\r\n  FormControlLabel,\r\n  FormLabel,\r\n  Grid,\r\n  Button,\r\n  RadioGroup,\r\n  Typography,\r\n  Radio,\r\n} from \"@material-ui/core\";\r\n\r\nexport const UserComponent = (props) => {\r\n  const [user, updateUser] = React.useState({\r\n    username: \"\",\r\n    password: \"\",\r\n    role: \"\",\r\n  });\r\n\r\n  const { title = \"Create User\", onSubmit, User, type, deleteUser } = props;\r\n\r\n  React.useEffect(() => {\r\n    if (type === \"edit\") {\r\n      updateUser(User);\r\n    }\r\n  }, [User]);\r\n\r\n  const updateState = (e, type) => {\r\n    updateUser((prevState) => ({ ...prevState, [type]: e.target.value }));\r\n  };\r\n\r\n  const isTypeEdit = () => (type === \"edit\" ? true : false);\r\n\r\n  return (\r\n    <Container>\r\n      <Typography variant=\"body1\" gutterBottom>\r\n        {title}\r\n      </Typography>\r\n      <form\r\n        noValidate\r\n        autoComplete=\"off\"\r\n        onSubmit={(e) => {\r\n          e.preventDefault();\r\n          onSubmit(user);\r\n          updateUser((prevState) => ({\r\n            ...prevState,\r\n            username: \"\",\r\n            password: \"\",\r\n            role: \"\",\r\n          }));\r\n        }}\r\n      >\r\n        <Box m={1}>\r\n          <Grid container spacing={1}>\r\n            <Box m={1}>\r\n              <Grid container spacing={2}>\r\n                <Grid item>\r\n                  <TextField\r\n                    id=\"username\"\r\n                    placeholder=\"Username\"\r\n                    value={user.username}\r\n                    onChange={(e) => updateState(e, \"username\")}\r\n                    variant=\"outlined\"\r\n                    size=\"small\"\r\n                    disabled={isTypeEdit()}\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <TextField\r\n                    id=\"password\"\r\n                    placeholder=\"Password\"\r\n                    type=\"password\"\r\n                    value={user.password}\r\n                    onChange={(e) => updateState(e, \"password\")}\r\n                    variant=\"outlined\"\r\n                    size=\"small\"\r\n                    disabled={isTypeEdit()}\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n            </Box>\r\n            <Grid container>\r\n              <Box m={1}>\r\n                <Grid item>\r\n                  <FormControl component=\"fieldset\">\r\n                    <FormLabel component=\"legend\">User Role</FormLabel>\r\n                    <RadioGroup\r\n                      aria-label=\"role\"\r\n                      name=\"role\"\r\n                      value={user.role}\r\n                      onChange={(e) => updateState(e, \"role\")}\r\n                      row\r\n                    >\r\n                      <FormControlLabel\r\n                        value=\"admin\"\r\n                        control={<Radio size=\"small\" />}\r\n                        label=\"Admin\"\r\n                      />\r\n                      <FormControlLabel\r\n                        value=\"user\"\r\n                        control={<Radio size=\"small\" />}\r\n                        label=\"User\"\r\n                      />\r\n                    </RadioGroup>\r\n                  </FormControl>\r\n                </Grid>\r\n              </Box>\r\n            </Grid>\r\n            <Grid item>\r\n              <Button\r\n                color=\"secondary\"\r\n                fullWidth\r\n                variant=\"contained\"\r\n                size=\"small\"\r\n                type=\"submit\"\r\n                style={{ textTransform: \"none\" }}\r\n              >\r\n                {title}\r\n              </Button>\r\n            </Grid>\r\n            {isTypeEdit() && (\r\n              <Grid item>\r\n                <Button\r\n                  color=\"primary\"\r\n                  fullWidth\r\n                  variant=\"contained\"\r\n                  size=\"small\"\r\n                  onClick={(e) => {\r\n                    e.preventDefault();\r\n                    deleteUser(user);\r\n                    updateUser((prevState) => ({\r\n                      ...prevState,\r\n                      username: \"\",\r\n                      password: \"\",\r\n                      role: \"\",\r\n                    }));\r\n                  }}\r\n                  style={{ textTransform: \"none\" }}\r\n                >\r\n                  Delete User\r\n                </Button>\r\n              </Grid>\r\n            )}\r\n          </Grid>\r\n        </Box>\r\n      </form>\r\n    </Container>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport {\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  ListSubheader,\r\n  Chip,\r\n  Button,\r\n  Box,\r\n  Typography,\r\n  Grid,\r\n} from \"@material-ui/core\";\r\n\r\nimport { useIndexedDB } from \"react-indexed-db\";\r\nimport { UserComponent } from \"./UserComponent\";\r\nexport const UserManagement = () => {\r\n  const [UserManagementState, updateUserManagementState] = React.useState({\r\n    users: [],\r\n    loader: {\r\n      status: true,\r\n      message: \"Fetching Users!!\",\r\n    },\r\n    error: {\r\n      status: false,\r\n      message: \"\",\r\n    },\r\n    selectedUser: {},\r\n  });\r\n\r\n  React.useEffect(() => {\r\n    getAll().then((users) => {\r\n      updateUserManagementState((prevState) => ({\r\n        ...prevState,\r\n        users,\r\n        loader: { message: \"User List Fetched!\", status: false },\r\n      }));\r\n    });\r\n  }, [UserManagementState.loader.status]);\r\n\r\n  const { add, getAll , update , deleteRecord  } = useIndexedDB(\"users\");\r\n\r\n  const AddNewUser = async (user) => {\r\n    if (user) {\r\n      const event = await add(user);\r\n      updateUserManagementState((prevState) => ({\r\n        ...prevState,\r\n        loader: { message: \"Updating User List!\", status: true },\r\n      }));\r\n    }\r\n  };\r\n\r\n  const EditUser = async ({role}) => {\r\n    if(role) {\r\n      const event = await update({  ...UserManagementState.selectedUser , role })\r\n      updateUserManagementState((prevState) => ({\r\n        ...prevState,\r\n        selectedUser : {},\r\n        loader: { message: \"Updating User List!\", status: true },\r\n      }));\r\n    }\r\n  }\r\n\r\n  const deleteUser = async (user) => {\r\n    if(user) {\r\n      const event = await deleteRecord (UserManagementState.selectedUser.id)\r\n      updateUserManagementState((prevState) => ({\r\n        ...prevState,\r\n        selectedUser : {},\r\n        loader: { message: \"Updating User List!\", status: true },\r\n      }));\r\n    }\r\n  }\r\n\r\n\r\n  const resetSelectedUserState = () => {\r\n    updateUserManagementState((prevState) => ({\r\n      ...prevState,\r\n      selectedUser: {},\r\n    }));\r\n  };\r\n\r\n  const updateSelectedUser = (user) => {\r\n    updateUserManagementState((prevState) => ({\r\n      ...prevState,\r\n      selectedUser: user,\r\n    }));\r\n  };\r\n\r\n\r\n\r\n\r\n  return (\r\n    <Grid container>\r\n      <Grid\r\n        item\r\n        lg={1.5}\r\n        alignItems=\"center\"\r\n        direction=\"column\"\r\n        justifyContent=\"center\"\r\n      >\r\n        <Button\r\n          color=\"secondary\"\r\n          size=\"small\"\r\n          fullWidth\r\n          style={{ textTransform: \"none\" }}\r\n          variant=\"contained\"\r\n          onClick={() => resetSelectedUserState()}\r\n        >\r\n          Create New User\r\n        </Button>\r\n        <List\r\n          component=\"nav\"\r\n          subheader={\r\n            <ListSubheader component=\"div\" id=\"nested-list-subheader\">\r\n              Available Users\r\n            </ListSubheader>\r\n          }\r\n        >\r\n          {UserManagementState.users.map(({ id ,  username, role, password }) => (\r\n            <ListItem\r\n              button\r\n               selected={id === UserManagementState.selectedUser.id}\r\n              onClick={() => updateSelectedUser({ id , username, role, password })}\r\n            >\r\n              <ListItemText>\r\n                <Box mr={1} component=\"span\">\r\n                  <Typography variant=\"body1\" component=\"span\">\r\n                    {username}\r\n                  </Typography>\r\n                </Box>\r\n                <Chip\r\n                  size=\"small\"\r\n                  label={role}\r\n                  color={role === \"admin\" ? \"primary\" : \"secondary\"}\r\n                />\r\n              </ListItemText>\r\n            </ListItem>\r\n          ))}\r\n        </List>\r\n      </Grid>\r\n      <Grid item>\r\n        {!UserManagementState.selectedUser.username && (\r\n          <UserComponent type=\"add\" title=\"Add User\" onSubmit={AddNewUser} />\r\n        )}\r\n        {!!UserManagementState.selectedUser.username && (\r\n          <UserComponent\r\n            type=\"edit\"\r\n            title=\"Edit User\"\r\n            User={UserManagementState.selectedUser}\r\n            onSubmit={EditUser}\r\n            deleteUser={deleteUser}\r\n          />\r\n        )}\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\n// export const DataSourceComponent = (props) => {\r\nexport const PreviewTable = (props) => {\r\n  const { title , rows, column , totalRows = 5 , totalCols = 5  } = props;\r\n\r\n  return (\r\n    <>\r\n      {title && <Typography variant=\"h6\" gutterBottom>\r\n        {title}\r\n      </Typography>}\r\n      <TableContainer component={Paper}>\r\n        <Table>\r\n          <TableHead>\r\n            <TableRow>\r\n              {column &&\r\n                column.map((header, colIndex) => {\r\n                  if (colIndex < totalCols) {\r\n                    return <TableCell key={`preview-tbl-header-${colIndex}`}> {header.toUpperCase()} </TableCell>;\r\n                  }\r\n                })}\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {rows &&\r\n              rows.map((row, index) => {\r\n                if (index < totalRows) {\r\n                  return (\r\n                    <TableRow key={`preview-tbl-${index}`}>\r\n                      {column.map((header, colIndex) => {\r\n                        if (colIndex < totalCols) {\r\n                          return (\r\n                            <TableCell key={`preview-tb-cell-${colIndex}`} component=\"th\" scope=\"row\">\r\n                              {\" \"}\r\n                              {row[header] || \"-\"}{\" \"}\r\n                            </TableCell>\r\n                          );\r\n                        }\r\n                      })}\r\n                    </TableRow>\r\n                  );\r\n                }\r\n              })}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nimport {\r\n  Box,\r\n  TextField,\r\n  Container,\r\n  FormControl,\r\n  FormControlLabel,\r\n  FormLabel,\r\n  Grid,\r\n  Button,\r\n  RadioGroup,\r\n  Typography,\r\n  Radio,\r\n  Select,\r\n  MenuItem,\r\n  InputLabel,\r\n} from \"@material-ui/core\";\r\n\r\nimport { PreviewTable } from \"./PreviewTable\";\r\n\r\nimport {loginContext} from './Login.Context';\r\n\r\n\r\nexport const DataSourceComponent = (props) => {\r\n  const [dataSource, updateDataSource] = React.useState({\r\n    name: \"\",\r\n    type: \"default_option\",\r\n    data: null,\r\n  });\r\n\r\n  const {\r\n    title = \"Create DataSource\",\r\n    onSubmit,\r\n    DataSource,\r\n    type,\r\n    deleteDataSource,\r\n  } = props;\r\n\r\n  React.useEffect(() => {\r\n    if (type === \"edit\") {\r\n      updateDataSource(DataSource);\r\n    }\r\n  }, [DataSource]);\r\n\r\n  const context  = React.useContext(loginContext);\r\n\r\n\r\n  const updateState = (e, type) => {\r\n    updateDataSource((prevState) => ({ ...prevState, [type]: e.target.value }));\r\n  };\r\n\r\n  const captureFileData = (e) => {\r\n    let FileReaderCursor = new FileReader();\r\n    FileReaderCursor.onloadend = (data) => {\r\n      let parsedRecords = JSON.parse(data.target.result);\r\n      if (parsedRecords && parsedRecords.length) {\r\n        updateDataSource((prevState) => ({\r\n          ...prevState,\r\n          data: parsedRecords,\r\n        }));\r\n      }\r\n    };\r\n\r\n    if (e.target.files[0]) {\r\n      let fileData = e.target.files[0];\r\n      let extension = fileData.name.split(\".\").pop().toLowerCase();\r\n      if (extension != \"json\") {\r\n        return alert(\"Only Json File Supported!!\");\r\n      }\r\n      FileReaderCursor.readAsText(fileData);\r\n    }\r\n  };\r\n\r\n  const isTypeEdit = () => (type === \"edit\" ? true : false);\r\n\r\n  return (\r\n    <Container>\r\n      <Typography variant=\"body1\" gutterBottom>\r\n        {title}\r\n      </Typography>\r\n      <form\r\n        noValidate\r\n        autoComplete=\"off\"\r\n        onSubmit={(e) => {\r\n          e.preventDefault();\r\n          onSubmit(dataSource);\r\n          updateDataSource((prevState) => ({\r\n            ...prevState,\r\n            name: \"\",\r\n            data: null,\r\n            type: \"default_option\",\r\n          }));\r\n        }}\r\n      >\r\n        <Box m={1}>\r\n          <Grid container spacing={1}>\r\n            <Box m={1}>\r\n              <Grid container spacing={2}>\r\n                <Grid item>\r\n                  <TextField\r\n                    id=\"dataSourcename\"\r\n                    placeholder=\"DataSourcename\"\r\n                    value={dataSource.name}\r\n                    onChange={(e) => updateState(e, \"name\")}\r\n                    variant=\"outlined\"\r\n                    size=\"small\"\r\n                    disabled={isTypeEdit()}\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <TextField\r\n                    select\r\n                    size=\"small\"\r\n                    variant=\"outlined\"\r\n                    placeholder=\"Select a DataSource Type\"\r\n                    SelectProps={{\r\n                      value: dataSource.type,\r\n                    }}\r\n                    onChange={(e) => updateState(e, \"type\")}\r\n                    disabled={isTypeEdit()}\r\n                  >\r\n                    <MenuItem value={\"default_option\"} disabled>\r\n                      Select a DataSource Type\r\n                    </MenuItem>\r\n                    <MenuItem value={\"rest_api\"}>Rest API</MenuItem>\r\n                    <MenuItem value={\"graphql_api\"} disabled>\r\n                      GraphQL API\r\n                    </MenuItem>\r\n                    <MenuItem value={\"soap_api\"} disabled>\r\n                      SOAP API\r\n                    </MenuItem>\r\n                  </TextField>\r\n                </Grid>\r\n              </Grid>\r\n            </Box>\r\n            <Grid container style={{ margin: 8 }} spacing={2}>\r\n              <Grid item>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  component=\"label\"\r\n                  color=\"primary\"\r\n                  fullWidth\r\n                  size=\"small\"\r\n                  style={{ textTransform: \"none\" }}\r\n                >\r\n                  Upload File\r\n                  <input type=\"file\" hidden onChange={captureFileData} />\r\n                </Button>\r\n              </Grid>\r\n              <Grid item>\r\n                <Button\r\n                  color=\"secondary\"\r\n                  fullWidth\r\n                  variant=\"contained\"\r\n                  size=\"small\"\r\n                  type=\"submit\"\r\n                  style={{ textTransform: \"none\" }}\r\n                >\r\n                  {title}\r\n                </Button>\r\n              </Grid>\r\n              {isTypeEdit() && (\r\n                <Grid item>\r\n                  <Button\r\n                    color=\"primary\"\r\n                    fullWidth\r\n                    variant=\"contained\"\r\n                    size=\"small\"\r\n                    onClick={(e) => {\r\n                      e.preventDefault();\r\n                      deleteDataSource(dataSource);\r\n                      updateDataSource((prevState) => ({\r\n                        ...prevState,\r\n                        dataSourcename: \"\",\r\n                        password: \"\",\r\n                        role: \"\",\r\n                      }));\r\n                    }}\r\n                    style={{ textTransform: \"none\" }}\r\n                  >\r\n                    Delete DataSource\r\n                  </Button>\r\n                </Grid>\r\n              )}\r\n            </Grid>\r\n          </Grid>\r\n        </Box>\r\n      </form>\r\n      {dataSource && dataSource.data && (\r\n        <Grid container>\r\n          <Grid item>\r\n\r\n            <PreviewTable\r\n              rows={dataSource.data}\r\n              column={Object.keys(dataSource.data[0])}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport {\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  ListSubheader,\r\n  Chip,\r\n  Button,\r\n  Box,\r\n  Typography,\r\n  Grid,\r\n} from \"@material-ui/core\";\r\n\r\nimport { useIndexedDB } from \"react-indexed-db\";\r\nimport { DataSourceComponent } from \"./DataSourceComponent\";\r\n\r\nimport {loginContext} from './Login.Context';\r\n\r\nexport const DataSourceManagement = () => {\r\n  const [DataSourceManagementState, updateDataSourceManagementState] =\r\n    React.useState({\r\n      dataSources: [],\r\n      loader: {\r\n        status: true,\r\n        message: \"Fetching Available Data Source!!\",\r\n      },\r\n      error: {\r\n        status: false,\r\n        message: \"\",\r\n      },\r\n      selectedDataSource: {},\r\n    });\r\n\r\n  const { isAuthenticated , isUserAdmin , signin }  = React.useContext(loginContext);\r\n\r\n  const { add, getAll, update, deleteRecord } = useIndexedDB(\"datasources\");\r\n\r\n  React.useEffect(() => {\r\n    getAll().then((sources) => {\r\n      updateDataSourceManagementState((prevState) => ({\r\n        ...prevState,\r\n        dataSources: sources,\r\n        loader: { message: \"Data Source List Fetched!\", status: false },\r\n      }));\r\n    });\r\n  }, [DataSourceManagementState.loader.status]);\r\n\r\n  const AddNewDataSource = async (dataSource) => {\r\n    if (dataSource) {\r\n      const event = await add(dataSource);\r\n      updateDataSourceManagementState((prevState) => ({\r\n        ...prevState,\r\n        loader: { message: \"Updating DataSource List!\", status: true },\r\n      }));\r\n    }\r\n  };\r\n\r\n  const EditDataSource = async ({ name, data }) => {\r\n    if (name) {\r\n      const event = await update({\r\n        ...DataSourceManagementState.selectedDataSource,\r\n        name,\r\n        data,\r\n      });\r\n      updateDataSourceManagementState((prevState) => ({\r\n        ...prevState,\r\n        selectedDataSource: {},\r\n        loader: { message: \"Updating DataSource List!\", status: true },\r\n      }));\r\n    }\r\n  };\r\n\r\n  const deleteDataSource = async (DataSource) => {\r\n    if (DataSource) {\r\n      const event = await deleteRecord(\r\n        DataSourceManagementState.selectedDataSource.id\r\n      );\r\n      updateDataSourceManagementState((prevState) => ({\r\n        ...prevState,\r\n        selectedDataSource: {},\r\n        loader: { message: \"Updating DataSource List!\", status: true },\r\n      }));\r\n    }\r\n  };\r\n\r\n  const resetSelectedDataSourceState = () => {\r\n    updateDataSourceManagementState((prevState) => ({\r\n      ...prevState,\r\n      selectedDataSource: {},\r\n    }));\r\n  };\r\n\r\n  const updateSelectedDataSource = (DataSource) => {\r\n    updateDataSourceManagementState((prevState) => ({\r\n      ...prevState,\r\n      selectedDataSource: DataSource,\r\n    }));\r\n  };\r\n\r\n  return (\r\n    <Grid container style={{ flexWrap: \"nowrap\" }}>\r\n      <Grid\r\n        item\r\n        lg={2}\r\n        alignItems=\"center\"\r\n        direction=\"column\"\r\n        justifyContent=\"center\"\r\n      >\r\n        <Button\r\n          color=\"secondary\"\r\n          size=\"small\"\r\n          fullWidth\r\n          style={{ textTransform: \"none\" }}\r\n          variant=\"contained\"\r\n          onClick={() => resetSelectedDataSourceState()}\r\n        >\r\n          Create New DataSource\r\n        </Button>\r\n        <List\r\n          component=\"nav\"\r\n          subheader={\r\n            <ListSubheader component=\"div\" id=\"nested-list-subheader\">\r\n              Available DataSources\r\n            </ListSubheader>\r\n          }\r\n        >\r\n          {DataSourceManagementState.dataSources.map(\r\n            ({ id, name, type, data }) => (\r\n              <ListItem\r\n                button\r\n                selected={\r\n                  id === DataSourceManagementState.selectedDataSource.id\r\n                }\r\n                onClick={() =>\r\n                  updateSelectedDataSource({ id, name, type, data })\r\n                }\r\n              >\r\n                <ListItemText>\r\n                  <Box mr={1} component=\"span\">\r\n                    <Typography variant=\"body1\" component=\"span\">\r\n                      {name}\r\n                    </Typography>\r\n                  </Box>\r\n                </ListItemText>\r\n              </ListItem>\r\n            )\r\n          )}\r\n        </List>\r\n      </Grid>\r\n      <Grid item lg={10}>\r\n        {!DataSourceManagementState.selectedDataSource.name && (\r\n          <DataSourceComponent\r\n            type=\"add\"\r\n            title=\"Add DataSource\"\r\n            onSubmit={AddNewDataSource}\r\n          />\r\n        )}\r\n        {!!DataSourceManagementState.selectedDataSource.name && (\r\n          <DataSourceComponent\r\n            type=\"edit\"\r\n            title=\"Edit DataSource\"\r\n            DataSource={DataSourceManagementState.selectedDataSource}\r\n            onSubmit={EditDataSource}\r\n            deleteDataSource={deleteDataSource}\r\n          />\r\n        )}\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nimport {\r\n  Box,\r\n  TextField,\r\n  Container,\r\n  FormControl,\r\n  FormControlLabel,\r\n  FormLabel,\r\n  Grid,\r\n  Button,\r\n  RadioGroup,\r\n  Typography,\r\n  Radio,\r\n  Select,\r\n  MenuItem,\r\n  InputLabel,\r\n} from \"@material-ui/core\";\r\n\r\nimport { PreviewTable } from \"./PreviewTable\";\r\nimport { useIndexedDB } from \"react-indexed-db\";\r\n\r\nexport const EditableComponent = (props) => {\r\n  const [component, updateComponent] = React.useState({\r\n    name: \"\",\r\n    type: \"default_option\",\r\n    data: [],\r\n    selectedDataSource : { data : [] , id : null , name : \"default_option\" , type : null },\r\n    datasource : null,\r\n    id : null\r\n  });\r\n\r\n  const {\r\n    title = \"Create Component\",\r\n    onSubmit,\r\n    Component,\r\n    type\r\n  } = props;\r\n\r\n  const {  getAll , getByIndex  } = useIndexedDB(\"datasources\");\r\n\r\n  React.useEffect(() => {\r\n    if (type === \"edit\") {\r\n      getByIndex('name',Component.datasource).then( selectedDataSource => {\r\n        updateComponent( prevState =>  ({ ...prevState , ...Component , selectedDataSource  }) ) \r\n      });\r\n    }\r\n     getAll().then((sources) => {\r\n      updateComponent((prevState) => ({\r\n        ...prevState,\r\n        data: sources,\r\n        loader: { message: \"Data Source List Fetched!\", status: false },\r\n      }));\r\n    })\r\n  },[Component]);\r\n\r\n  const updateState = (e, type) => {\r\n    updateComponent((prevState,nextState) => {\r\n      return { ...prevState, [type]: e.target.value } \r\n    });\r\n  };\r\n\r\n  const isTypeEdit = () => (type === \"edit\" ? true : false);\r\n\r\n  return (\r\n    <Container>\r\n      <Typography variant=\"body1\" gutterBottom>\r\n        {title}\r\n      </Typography>\r\n      <form\r\n        noValidate\r\n        autoComplete=\"off\"\r\n        onSubmit={(e) => {\r\n          e.preventDefault();\r\n          onSubmit({ name : component.name , datasource : component.selectedDataSource.name , type : component.type });\r\n          updateComponent((prevState) => ({\r\n            ...prevState,\r\n          name: \"\",\r\n          type: \"default_option\",\r\n          data: [],\r\n          selectedDataSource : { data : [] , id : null , name : \"default_option\" , type : null }\r\n  }\r\n  ));\r\n        }}\r\n      >\r\n        <Box m={1}>\r\n          <Grid container spacing={1}>\r\n            <Box m={1}>\r\n              <Grid container spacing={2}>\r\n                <Grid item>\r\n                  <TextField\r\n                    id=\"componentname\"\r\n                    placeholder=\"Componentname\"\r\n                    value={component.name}\r\n                    onChange={(e) => updateState(e, \"name\")}\r\n                    variant=\"outlined\"\r\n                    size=\"small\"\r\n                    disabled={isTypeEdit()}\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <TextField\r\n                    select\r\n                    size=\"small\"\r\n                    variant=\"outlined\"\r\n                    placeholder=\"Select a Component Type\"\r\n                    SelectProps={{\r\n                      value: component.type,\r\n                    }}\r\n                    onChange={(e) => updateState(e, \"type\")}\r\n                    disabled={isTypeEdit()}\r\n                  >\r\n                    <MenuItem value={\"default_option\"} disabled>\r\n                      Select a Component Type\r\n                    </MenuItem>\r\n                    <MenuItem value={\"table\"}>Table</MenuItem>\r\n                  </TextField>\r\n                </Grid>\r\n                <Grid item>\r\n                  <TextField\r\n                    select\r\n                    size=\"small\"\r\n                    variant=\"outlined\"\r\n                    placeholder=\"Select a Component Type\"\r\n                    SelectProps={{\r\n                      value: component.selectedDataSource.id != null ? component.selectedDataSource : \"default_option\",\r\n                    }}\r\n                    onChange={(e) => updateState(e, \"selectedDataSource\")}\r\n                    disabled={isTypeEdit()}\r\n                  >\r\n                    <MenuItem value=\"default_option\" disabled>\r\n                      Select a Data Source\r\n                    </MenuItem>\r\n                    {component.data.map( option => {\r\n                      return <MenuItem value={option}>{option.name}</MenuItem>\r\n                    } )}\r\n                    { isTypeEdit() && <MenuItem value={component.selectedDataSource} disabled>\r\n                      {component.selectedDataSource.name}\r\n                    </MenuItem> }\r\n\r\n                  </TextField>\r\n                </Grid>\r\n              </Grid>\r\n            </Box>\r\n            <Grid container style={{ margin: 8 }} spacing={2}>\r\n              <Grid item>\r\n              {!isTypeEdit() && (\r\n                <Button\r\n                  color=\"secondary\"\r\n                  fullWidth\r\n                  variant=\"contained\"\r\n                  size=\"small\"\r\n                  type=\"submit\"\r\n                  style={{ textTransform: \"none\" }}\r\n                >\r\n                  {title}\r\n                </Button>\r\n                )}\r\n              </Grid>\r\n              {isTypeEdit() && (\r\n                <Grid item>\r\n                  {/*<Button\r\n                    color=\"primary\"\r\n                    fullWidth\r\n                    variant=\"contained\"\r\n                    size=\"small\"\r\n                    onClick={(e) => {\r\n                      e.preventDefault();\r\n                      Component(component);\r\n                      Component((prevState) => ({\r\n                        ...prevState,\r\n                        componentname: \"\",\r\n                        password: \"\",\r\n                        role: \"\",\r\n                      }));\r\n                    }}\r\n                    style={{ textTransform: \"none\" }}\r\n                  >\r\n                    Delete Component\r\n                  </Button> */}\r\n                </Grid>\r\n              )}\r\n            </Grid>\r\n          </Grid>\r\n        </Box>\r\n      </form>\r\n      {component && component.data && (\r\n        <Grid container>\r\n          <Grid item>\r\n          {\r\n            component.type == \"table\" && component.selectedDataSource.data.length > 0 &&\r\n            <PreviewTable\r\n              rows={component.selectedDataSource.data}\r\n              column={Object.keys(component.selectedDataSource.data[0])}\r\n            />\r\n            }\r\n\r\n          </Grid>\r\n        </Grid>\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport {\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  ListSubheader,\r\n  Chip,\r\n  Button,\r\n  Box,\r\n  Typography,\r\n  Grid,\r\n} from \"@material-ui/core\";\r\n\r\nimport { useIndexedDB } from \"react-indexed-db\";\r\n\r\nimport { EditableComponent } from './Component';\r\n\r\nexport const ComponentManagement = () => {\r\n  const [ComponentManagementState, updateComponentManagementState] =\r\n    React.useState({\r\n      components: [],\r\n      loader: {\r\n        status: true,\r\n        message: \"Fetching Available Data Source!!\",\r\n      },\r\n      error: {\r\n        status: false,\r\n        message: \"\",\r\n      },\r\n      selectedComponent: {},\r\n    });\r\n\r\n  const { add, getAll, update, deleteRecord } = useIndexedDB(\"components\");\r\n\r\n  React.useEffect(() => {\r\n    getAll().then((sources) => {\r\n      updateComponentManagementState((prevState) => ({\r\n        ...prevState,\r\n        components: sources,\r\n        loader: { message: \"Components List Fetched!\", status: false },\r\n      }));\r\n    });\r\n  }, [ComponentManagementState.loader.status]);\r\n\r\n  const AddNewComponent = async (component) => {\r\n    if (component) {\r\n      const event = await add(component);\r\n      updateComponentManagementState((prevState) => ({\r\n        ...prevState,\r\n        loader: { message: \"Updating Component List!\", status: true },\r\n      }));\r\n    }\r\n  };\r\n\r\n  const EditComponent = async ({ name, data }) => {\r\n    if (name) {\r\n      const event = await update({\r\n        ...ComponentManagementState.selectedComponent,\r\n        name,\r\n        data,\r\n      });\r\n      updateComponentManagementState((prevState) => ({\r\n        ...prevState,\r\n        selectedComponent: {},\r\n        loader: { message: \"Updating Component List!\", status: true },\r\n      }));\r\n    }\r\n  };\r\n\r\n  const deleteComponent = async (Component) => {\r\n    if (Component) {\r\n      const event = await deleteRecord(\r\n        ComponentManagementState.selectedComponent.id\r\n      );\r\n      updateComponentManagementState((prevState) => ({\r\n        ...prevState,\r\n        selectedComponent: {},\r\n        loader: { message: \"Updating Component List!\", status: true },\r\n      }));\r\n    }\r\n  };\r\n\r\n  const resetSelectedComponentState = () => {\r\n    updateComponentManagementState((prevState) => ({\r\n      ...prevState,\r\n      selectedComponent: {},\r\n    }));\r\n  };\r\n\r\n  const updateSelectedComponent = (component) => {\r\n    updateComponentManagementState((prevState) => ({\r\n      ...prevState,\r\n      selectedComponent: component,\r\n    }));\r\n  };\r\n\r\n  return (\r\n    <Grid container spacing={2} style={{ flexWrap: \"nowrap\" }}>\r\n      <Grid\r\n        item\r\n        lg={2}\r\n        alignItems=\"center\"\r\n        direction=\"column\"\r\n        justifyContent=\"center\"\r\n      >\r\n        <Button\r\n          color=\"secondary\"\r\n          size=\"small\"\r\n          fullWidth\r\n          style={{ textTransform: \"none\" }}\r\n          variant=\"contained\"\r\n          onClick={() => resetSelectedComponentState()}\r\n        >\r\n          Create New Component\r\n        </Button>\r\n        <List\r\n          component=\"nav\"\r\n          subheader={\r\n            <ListSubheader component=\"div\" id=\"nested-list-subheader\">\r\n              Available Components\r\n            </ListSubheader>\r\n          }\r\n        >\r\n          {ComponentManagementState.components.map(\r\n            ({ id, name, type, datasource }) => (\r\n              <ListItem\r\n                button\r\n                selected={\r\n                  id === ComponentManagementState.selectedComponent.id\r\n                }\r\n                onClick={() =>\r\n                  updateSelectedComponent({ id, name, type, datasource })\r\n                }\r\n              >\r\n                <ListItemText>\r\n                  <Box mr={1} component=\"span\">\r\n                    <Typography variant=\"body1\" component=\"span\">\r\n                      {name}\r\n                    </Typography>\r\n                  </Box>\r\n                </ListItemText>\r\n              </ListItem>\r\n            )\r\n          )}\r\n        </List>\r\n      </Grid>\r\n      <Grid item lg={10}>\r\n        {!ComponentManagementState.selectedComponent.name && (\r\n          <EditableComponent\r\n            type=\"add\"\r\n            title=\"Add Component\"\r\n            onSubmit={AddNewComponent}\r\n          />\r\n        )}\r\n        {!!ComponentManagementState.selectedComponent.name && (\r\n          <EditableComponent\r\n            type=\"edit\"\r\n            title=\"Edit Component\"\r\n            Component={ComponentManagementState.selectedComponent}\r\n            onSubmit={EditComponent}\r\n            deleteComponent={deleteComponent}\r\n          />\r\n        )}\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useIndexedDB } from \"react-indexed-db\";\r\nimport { Responsive, WidthProvider } from \"react-grid-layout\";\r\nimport GridLayout from 'react-grid-layout';\r\n\r\nimport \"./DashboardPreview.css\";\r\n\r\nimport {\r\n  TextField,\r\n  Container,\r\n  FormControl,\r\n  FormControlLabel,\r\n  FormLabel,\r\n  InputLabel,\r\n  Input,\r\n  Grid,\r\n  Button,\r\n  RadioGroup,\r\n  Typography,\r\n  Radio,\r\n  ListItemText,\r\n  Select,\r\n  Checkbox,\r\n  MenuItem,\r\n} from \"@material-ui/core\";\r\n\r\nimport { PreviewTable } from \"./PreviewTable\";\r\n\r\nexport const DashboardPreview = ({ name, components }) => {\r\n  const datasources = useIndexedDB(\"datasources\");\r\n  const componentsDb = useIndexedDB(\"components\");\r\n  const ResponsiveReactGridLayout = WidthProvider(Responsive);\r\n  const [dashboard, updateDashboard] = React.useState({\r\n    data: [],\r\n  });\r\n\r\n  React.useEffect( async () => {\r\n    const sourcesList = await datasources.getAll()\r\n    const componentsList = await componentsDb.getAll()\r\n      const filteredData = componentsList.filter( ({name}) => components.includes(name) ).map( component => ({ ...component , data :  sourcesList.filter( d => d.name === component.datasource ).map( ({data}) => data ).flat()}) )\r\n      console.log(componentsList)\r\n      updateDashboard((prevState) => ({\r\n        ...prevState,\r\n        data: filteredData,\r\n      }));\r\n  }, [components]);\r\n\r\n  const opts = {\r\n    compactType: \"horizontal\",\r\n    mounted: false,\r\n  };\r\n\r\n  return (\r\n    <>\r\n    <Typography variant=\"h6\">\r\n      {name.toUpperCase()}\r\n    </Typography>\r\n    <ResponsiveReactGridLayout\r\n      measureBeforeMount={false}\r\n      useCSSTransforms={opts.mounted}\r\n      compactType={opts.compactType}\r\n      preventCollision={!opts.compactType}\r\n    >\r\n      { dashboard.data.map ( (d,i) => <div\r\n                key={`${new Date().getTime()}-${i}`}\r\n                data-grid={{\r\n                  x: i * 3,\r\n                  y: 0,\r\n                  w: 3,\r\n                  h: 2,\r\n                  static: false,\r\n                }}\r\n                style={{\r\n                  display: \"flex\",\r\n                  flexDirection: \"column\",\r\n                  alignItems: \"center\",\r\n                  padding: 8,\r\n                }}\r\n              >\r\n                <PreviewTable\r\n                  key={`${new Date().getTime()}-${i}`}\r\n                  title={`Preview Table - ${d.name}`}\r\n                  rows={d.data}\r\n                  totalRows={3}\r\n                  totalCols={3}\r\n                  column={Object.keys(d.data[0])}\r\n                />\r\n              </div>  )}\r\n\r\n\r\n    </ResponsiveReactGridLayout>\r\n    </>\r\n  );\r\n};\r\n\r\n\r\n/* const generateDOM = () => {\r\n    let yIndexTracker = 0;\r\n    let xIndexTracker = 0;\r\n\r\n    return (\r\n      components.length > 0  &&\r\n      components.map((component, index) => {\r\n        const [rows] = dashboard.data\r\n          .filter((d) => d.name == component.datasource)\r\n          .map(({ data }) => data);\r\n        if (rows) {\r\n          index > 0 && index % 3 == 0 ? (yIndexTracker += 1) : yIndexTracker;\r\n          index > 0 && index % 3 != 0\r\n            ? (xIndexTracker = index * 3)\r\n            : (xIndexTracker = 0);\r\n\r\n          if (component.type == \"table\") {\r\n            return (\r\n              <div\r\n                key={`${new Date().getTime()}-${index}`}\r\n                data-grid={{\r\n                  x: xIndexTracker,\r\n                  y: yIndexTracker,\r\n                  w: 3,\r\n                  h: 2,\r\n                  static: false,\r\n                }}\r\n                style={{\r\n                  display: \"flex\",\r\n                  flexDirection: \"column\",\r\n                  alignItems: \"center\",\r\n                  padding: 8,\r\n                }}\r\n              >\r\n                <PreviewTable\r\n                  key={`${new Date().getTime()}-${index}`}\r\n                  title={`Preview Table - ${component.name}`}\r\n                  rows={rows}\r\n                  totalRows={3}\r\n                  totalCols={3}\r\n                  column={Object.keys(rows[0])}\r\n                />\r\n              </div>\r\n            );\r\n          }\r\n\r\n          return <></>\r\n\r\n        }\r\n      })\r\n    );\r\n  };*/","import React from \"react\";\r\n\r\nimport {\r\n  Box,\r\n  TextField,\r\n  Container,\r\n  FormControl,\r\n  FormControlLabel,\r\n  FormLabel,\r\n  InputLabel,\r\n  Input,\r\n  Grid,\r\n  Button,\r\n  RadioGroup,\r\n  Typography,\r\n  Radio,\r\n  ListItemText,\r\n  Select,\r\n  Checkbox,\r\n  MenuItem,\r\n} from \"@material-ui/core\";\r\n\r\nimport { PreviewTable } from \"./PreviewTable\";\r\nimport { useIndexedDB } from \"react-indexed-db\";\r\nimport { DashboardPreview } from \"./DashboardPreview\";\r\n\r\nexport const DashboardComponent = (props) => {\r\n  const [dashboard, updateDashboard] = React.useState({\r\n    name: \"\",\r\n    users: {\r\n      list: [],\r\n      selectedUser: [],\r\n    },\r\n    components: {\r\n      list: [],\r\n      selectedComponent: [],\r\n    },\r\n  });\r\n\r\n  const {\r\n    title = \"Create Dashboard\",\r\n    onSubmit,\r\n    Dashboard,\r\n    type,\r\n    deleteDashboard,\r\n  } = props;\r\n\r\n  const users = useIndexedDB(\"users\");\r\n  const components = useIndexedDB(\"components\");\r\n\r\n  React.useEffect(() => {\r\n    if (type === \"edit\") {\r\n      console.log(Dashboard);\r\n      updateDashboard((prevState) => ({\r\n        ...prevState,\r\n        name: Dashboard.name,\r\n        components: {\r\n          ...prevState.components,\r\n          selectedComponent: Dashboard.components,\r\n        },\r\n        users: { ...prevState.users, selectedUser: Dashboard.assigned_users },\r\n      }));\r\n    }\r\n    users.getAll().then((users) => {\r\n      updateDashboard((prevState) => ({\r\n        ...prevState,\r\n        users: { ...prevState.users, list: users },\r\n        loader: { message: \"User List Fetched!\", status: false },\r\n      }));\r\n    });\r\n    components.getAll().then((components) => {\r\n      updateDashboard((prevState) => ({\r\n        ...prevState,\r\n        components: { ...prevState.components, list: components },\r\n        loader: { message: \"Components List Fetched!\", status: false },\r\n      }));\r\n    });\r\n  }, [Dashboard]);\r\n\r\n  const updateState = (e, type) => {\r\n    updateDashboard((prevState) => ({ ...prevState, [type]: e.target.value }));\r\n  };\r\n\r\n  const handleChange = (event) => {\r\n    updateDashboard((prevState) => {\r\n      return {\r\n        ...prevState,\r\n        components: {\r\n          ...prevState.components,\r\n          selectedComponent: event.target.value,\r\n        },\r\n      };\r\n    });\r\n  };\r\n\r\n  const handleUserSelection = (e) => {\r\n    updateDashboard((prevState) => {\r\n      return {\r\n        ...prevState,\r\n        users: { ...prevState.users, selectedUser: e.target.value },\r\n      };\r\n    });\r\n  };\r\n\r\n  const isTypeEdit = () => (type === \"edit\" ? true : false);\r\n\r\n  return (\r\n    <Container>\r\n      <Typography variant=\"body1\" gutterBottom>\r\n        {title}\r\n      </Typography>\r\n      <form\r\n        noValidate\r\n        autoComplete=\"off\"\r\n        onSubmit={(e) => {\r\n          e.preventDefault();\r\n          onSubmit({\r\n            name: dashboard.name,\r\n            components: dashboard.components.selectedComponent,\r\n            assigned_users: dashboard.users.selectedUser,\r\n          });\r\n          updateDashboard((prevState) => ({\r\n            name: \"\",\r\n            type: \"default_option\",\r\n            data: null,\r\n            users: {\r\n              list: [],\r\n              selectedUser: [],\r\n            },\r\n            components: {\r\n              list: [],\r\n              selectedComponent: [],\r\n            },\r\n          }));\r\n        }}\r\n      >\r\n        <Box m={1}>\r\n          <Grid container spacing={1}>\r\n            <Box m={1}>\r\n              <Grid container spacing={2}>\r\n                <Grid item>\r\n                  <TextField\r\n                    id=\"dashboardname\"\r\n                    placeholder=\"Dashboardname\"\r\n                    value={dashboard.name}\r\n                    onChange={(e) => updateState(e, \"name\")}\r\n                    variant=\"outlined\"\r\n                    size=\"small\"\r\n                    disabled={isTypeEdit()}\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <TextField\r\n                    select\r\n                    size=\"small\"\r\n                    variant=\"outlined\"\r\n                    label=\"Select Components\"\r\n                    style={{ minWidth: 240 }}\r\n                    SelectProps={{\r\n                      multiple: true,\r\n                      value: dashboard.components.selectedComponent,\r\n                      renderValue: (selected) => selected.join(\", \"),\r\n                    }}\r\n                    onChange={handleChange}\r\n                    // disabled={isTypeEdit()}\r\n                  >\r\n                    {dashboard.components.list.map((component) => (\r\n                      <MenuItem key={component.name} value={component.name}>\r\n                        <Checkbox\r\n                          checked={\r\n                            dashboard.components.selectedComponent.indexOf(\r\n                              component.name\r\n                            ) > -1\r\n                          }\r\n                        />\r\n                        <ListItemText primary={component.name} />\r\n                      </MenuItem>\r\n                    ))}\r\n                  </TextField>\r\n                </Grid>\r\n                <Grid item>\r\n                  <TextField\r\n                    select\r\n                    size=\"small\"\r\n                    variant=\"outlined\"\r\n                    label=\"Assign Users\"\r\n                    style={{ minWidth: 240 }}\r\n                    SelectProps={{\r\n                      multiple: true,\r\n                      value: dashboard.users.selectedUser,\r\n                      renderValue: (selected) => selected.join(\", \"),\r\n                    }}\r\n                    onChange={handleUserSelection}\r\n                    // disabled={isTypeEdit()}\r\n                  >\r\n                    {dashboard.users.list.map((user) => (\r\n                      <MenuItem key={user.username} value={user.username}>\r\n                        <Checkbox\r\n                          checked={\r\n                            dashboard.users.selectedUser.indexOf(\r\n                              user.username\r\n                            ) > -1\r\n                          }\r\n                        />\r\n                        <ListItemText primary={user.username} />\r\n                      </MenuItem>\r\n                    ))}\r\n                  </TextField>\r\n                </Grid>\r\n              </Grid>\r\n            </Box>\r\n            <Grid container style={{ margin: 8 }} spacing={2}>\r\n              <Grid item>\r\n                <Button\r\n                  color=\"secondary\"\r\n                  fullWidth\r\n                  variant=\"contained\"\r\n                  size=\"small\"\r\n                  type=\"submit\"\r\n                  style={{ textTransform: \"none\" }}\r\n                >\r\n                  {title}\r\n                </Button>\r\n              </Grid>\r\n              {isTypeEdit() && (\r\n                <Grid item>\r\n                  <Button\r\n                    color=\"primary\"\r\n                    fullWidth\r\n                    variant=\"contained\"\r\n                    size=\"small\"\r\n                    onClick={(e) => {\r\n                      e.preventDefault();\r\n                      deleteDashboard(dashboard);\r\n                      updateDashboard((prevState) => ({\r\n                        ...prevState,\r\n                        dashboardname: \"\",\r\n                        password: \"\",\r\n                        role: \"\",\r\n                      }));\r\n                    }}\r\n                    style={{ textTransform: \"none\" }}\r\n                  >\r\n                    Delete Dashboard\r\n                  </Button>\r\n                </Grid>\r\n              )}\r\n            </Grid>\r\n          </Grid>\r\n        </Box>\r\n      </form>\r\n      {dashboard && dashboard.components.selectedComponent && (\r\n        <DashboardPreview\r\n          name={dashboard.name}\r\n          components={dashboard.components.list.filter((component) =>\r\n            dashboard.components.selectedComponent.includes(component.name)).map( ({name}) => name)}\r\n        />\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport {\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  ListSubheader,\r\n  Chip,\r\n  Button,\r\n  Box,\r\n  Typography,\r\n  Grid,\r\n} from \"@material-ui/core\";\r\n\r\nimport { useIndexedDB } from \"react-indexed-db\";\r\n\r\nimport {DashboardComponent} from './DashboardComponent'\r\n\r\nexport const DashboardManagement = () => {\r\n  const [DashboardManagementState, updateDashboardManagementState] =\r\n    React.useState({\r\n      dashboards: [],\r\n      loader: {\r\n        status: true,\r\n        message: \"Fetching Available Data Source!!\",\r\n      },\r\n      error: {\r\n        status: false,\r\n        message: \"\",\r\n      },\r\n      selectedDashboard: {},\r\n    });\r\n\r\n  const { add, getAll, update, deleteRecord } = useIndexedDB(\"dashboards\");\r\n\r\n  React.useEffect(() => {\r\n    getAll().then( dashboards => {\r\n      updateDashboardManagementState((prevState) => ({\r\n        ...prevState,\r\n        dashboards ,\r\n        loader: { message: \"Dashboards List Fetched!\", status: false },\r\n      }));\r\n    });\r\n  }, [DashboardManagementState.loader.status]);\r\n\r\n  const AddNewDashboard = async (dashboard) => {\r\n    if (dashboard) {\r\n      const event = await add(dashboard);\r\n      updateDashboardManagementState((prevState) => ({\r\n        ...prevState,\r\n        loader: { message: \"Updating Dashboard List!\", status: true },\r\n      }));\r\n    }\r\n  };\r\n\r\n  const EditDashboard = async ({ name, components , assigned_users }) => {\r\n    if (name) {\r\n      const event = await update({\r\n        ...DashboardManagementState.selectedDashboard,\r\n        components,\r\n        assigned_users\r\n      });\r\n      updateDashboardManagementState((prevState) => ({\r\n        ...prevState,\r\n        selectedDashboard: {},\r\n        loader: { message: \"Updating Dashboard List!\", status: true },\r\n      }));\r\n    }\r\n  };\r\n\r\n  const deleteDashboard = async (Dashboard) => {\r\n    if (Dashboard) {\r\n      const event = await deleteRecord(\r\n        DashboardManagementState.selectedDashboard.id\r\n      );\r\n      updateDashboardManagementState((prevState) => ({\r\n        ...prevState,\r\n        selectedDashboard: {},\r\n        loader: { message: \"Updating Dashboard List!\", status: true },\r\n      }));\r\n    }\r\n  };\r\n\r\n  const resetSelectedDashboardState = () => {\r\n    updateDashboardManagementState((prevState) => ({\r\n      ...prevState,\r\n      selectedDashboard: {},\r\n    }));\r\n  };\r\n\r\n  const updateSelectedDashboard = (component) => {\r\n    updateDashboardManagementState((prevState) => ({\r\n      ...prevState,\r\n      selectedDashboard: component,\r\n    }));\r\n  };\r\n\r\n  return (\r\n    <Grid container spacing={2} style={{ flexWrap: \"nowrap\" }}>\r\n      <Grid\r\n        item\r\n        lg={2}\r\n      >\r\n        <Button\r\n          color=\"secondary\"\r\n          size=\"small\"\r\n          fullWidth\r\n          style={{ textTransform: \"none\" }}\r\n          variant=\"contained\"\r\n          onClick={() => resetSelectedDashboardState()}\r\n        >\r\n          Create New Dashboard\r\n        </Button>\r\n        <List\r\n          component=\"nav\"\r\n          subheader={\r\n            <ListSubheader component=\"div\" id=\"nested-list-subheader\">\r\n              Available Dashboards\r\n            </ListSubheader>\r\n          }\r\n        >\r\n          {DashboardManagementState.dashboards.map(\r\n            ({ id, name, components , assigned_users },index) => (\r\n              <ListItem\r\n                key={`ds-mgmt-list-${index}`}\r\n                button\r\n                selected={\r\n                  id === DashboardManagementState.selectedDashboard.id\r\n                }\r\n                onClick={() =>\r\n                  updateSelectedDashboard({ id, name, components , assigned_users })\r\n                }\r\n              >\r\n                <ListItemText>\r\n                  <Box mr={1} component=\"span\">\r\n                    <Typography variant=\"body1\" component=\"span\">\r\n                      {name}\r\n                    </Typography>\r\n                  </Box>\r\n                </ListItemText>\r\n              </ListItem>\r\n            )\r\n          )}\r\n        </List>\r\n      </Grid>\r\n      <Grid item lg={10}>\r\n        {!DashboardManagementState.selectedDashboard.name && (\r\n          <DashboardComponent\r\n            type=\"add\"\r\n            title=\"Add Dashboard\"\r\n            onSubmit={AddNewDashboard}\r\n          />\r\n        )}\r\n        {!!DashboardManagementState.selectedDashboard.name && (\r\n          <DashboardComponent\r\n            type=\"edit\"\r\n            title=\"Edit Dashboard\"\r\n            Dashboard={DashboardManagementState.selectedDashboard}\r\n            onSubmit={EditDashboard}\r\n            deleteDashboard={deleteDashboard}\r\n          />\r\n        )}\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport {\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  ListSubheader,\r\n  Chip,\r\n  Button,\r\n  Box,\r\n  Typography,\r\n  Grid,\r\n} from \"@material-ui/core\";\r\n\r\nimport { useIndexedDB } from \"react-indexed-db\";\r\nimport useAuth , { ProvideAuth } from './Auth.Context';\r\nimport {loginContext} from './Login.Context';\r\nimport { DashboardPreview } from \"./DashboardPreview\";\r\n\r\n\r\nexport const MyDashboard = () => {\r\n\r\n  const { user }  = useAuth();\r\n  const { getByIndex, getAll, update, deleteRecord } = useIndexedDB(\"dashboards\");\r\n\r\n  const [myDashboards,updateMyDashboards] = React.useState([])\r\n\r\n  React.useEffect(() => {\r\n    if(user) {\r\n      getAll().then( dashboards => {\r\n        const filteredList = dashboards.filter( dashboard => dashboard.assigned_users.includes(user.username) )\r\n        updateMyDashboards(filteredList);\r\n      })\r\n    }\r\n  },[])\r\n\r\n\r\n  return(\r\n    <div>\r\n      { user && user.isAuthenticated &&  myDashboards.map( dashboard => <span> <DashboardPreview  name={dashboard.name} components={dashboard.components}  /> </span> ) }\r\n      { !user && <span> User Need To Login </span> }\r\n    </div>\r\n    )\r\n}","import React from \"react\";\nimport \"./styles.css\";\n\n// import { DBConfig } from \"./DbConfig\";\nimport { Box , Typography } from \"@material-ui/core\";\nimport { BrowserRouter as Router , Redirect, Switch, Route } from \"react-router-dom\";\nimport { Header } from \"./Header\";\n\nimport { Login } from \"./Login\";\n\nimport { UserManagement } from \"./UserManagement\";\nimport { DataSourceManagement } from \"./DataSource\";\nimport { ComponentManagement } from \"./ComponentsManagement\";\nimport { DashboardManagement } from \"./DashboardManagement\";\nimport { MyDashboard } from \"./MyDashboards\";\n\nimport { initDB, IndexedDB } from \"react-indexed-db\";\n\nimport {loginContext} from './Login.Context';\n\nimport useAuth , { ProvideAuth } from './Auth.Context';\n\nlet DBConfig = {\n  name: \"TechChallenge\",\n  version: 4,\n  objectStoresMeta: [\n    {\n      store: \"users\",\n      storeConfig: { keyPath: \"id\", autoIncrement: true },\n      storeSchema: [\n        { name: \"username\", keypath: \"username\", options: { unique: true } },\n        { name: \"password\", keypath: \"password\", options: { unique: false } },\n        { name: \"role\", keypath: \"role\", options: { unique: false } },\n      ],\n    },\n    {\n      store: \"datasources\",\n      storeConfig: { keyPath: \"id\", autoIncrement: true },\n      storeSchema: [\n        { name: \"name\", keypath: \"name\", options: { unique: true } },\n        { name: \"type\", keypath: \"type\", options: { unique: false } },\n        { name: \"path\", keypath: \"path\", options: { unique: true } },\n        { name: \"dataset\", keypath: \"dataset\", options: { unique: false } },\n      ],\n    },\n    {\n      store: \"components\",\n      storeConfig: { keyPath: \"id\", autoIncrement: true },\n      storeSchema: [\n        { name: \"name\", keypath: \"name\", options: { unique: true } },\n        { name: \"type\", keypath: \"type\", options: { unique: false } },\n        { name: \"datasource\", keypath: \"datasource\", options: { unique: false } },\n      ],\n    },\n    {\n      store: \"dashboards\",\n      storeConfig: { keyPath: \"id\", autoIncrement: true },\n      storeSchema: [\n        { name: \"name\", keypath: \"name\", options: { unique: true } },\n        { name: \"components\", keypath: \"components\", options: { unique: false } },\n        { name: \"assigned_users\", keypath: \"assigned_users\", options: { unique: false } },\n      ],\n    }\n  ],\n};\n\ninitDB(DBConfig);\n\nfunction PrivateRoute({ children, ...rest }) {\n  let auth = useAuth();\n  console.log(auth)\n  return (\n    <Route\n      {...rest}\n      render={({ location }) =>\n        auth.user && auth.user.role ==\"admin\" ? (\n          children\n        ) : (\n          <Redirect\n            to={{\n              pathname: \"/\",\n            }}\n          />\n        )\n      }\n    />\n  );\n}\n\nexport default function App() {\n\n\n  return (\n    <ProvideAuth>\n    <Router>\n      <Header />\n      <Box style={{ marginTop: 72 }}>\n        <Switch>\n          <PrivateRoute path=\"/datasources\">\n                <DataSourceManagement />\n          </PrivateRoute>\n          <PrivateRoute  path=\"/usermanagement\">\n              <UserManagement />\n          </PrivateRoute>\n          <PrivateRoute path=\"/components\">\n              <ComponentManagement/>\n          </PrivateRoute>\n          <PrivateRoute path='/dashboard'>\n              <DashboardManagement/>\n          </PrivateRoute>\n          <Route path='/my-dashboard'>\n            <MyDashboard />\n          </Route>\n          <Route path=\"/\" exact>\n            <Login/>\n          </Route>\n        </Switch>\n      </Box>\n    </Router>\n    </ProvideAuth>\n  );\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n    <App /> ,\n  rootElement\n);\n"],"sourceRoot":""}